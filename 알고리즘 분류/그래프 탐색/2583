import java.io.*;
import java.util.*;


public class Main {
    //모눈종이 위치 관련 클래스
    static class position{
        int x, y;
        public position(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int M,N,K;
    static boolean[][] arr, visited;	//모눈종이 정보 및 방문 확인 배열
    static int[] dx = {0, 0, -1, 1};	//상하좌우 x변경값
    static int[] dy = {-1, 1, 0, 0};	//상하좌우 y변경값
    static ArrayList<Integer> answer = new ArrayList<>();	//영역의 넓이 저장 리스트
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        M = Integer.parseInt(st.nextToken());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        arr = new boolean[M][N];
        //직사각형 정보 저장 및 채우기
        for(int i=0;i<K;i++){
            st = new StringTokenizer(br.readLine(), " ");
            int x1 = Integer.parseInt(st.nextToken());
            int y1 = Integer.parseInt(st.nextToken());
            int x2 = Integer.parseInt(st.nextToken());
            int y2 = Integer.parseInt(st.nextToken());
            fillArr(x1, y1, x2, y2);
        }
        visited = new boolean[M][N];
        int count = 0;
        //BFS탐색으로 각 영역 구하기
        for(int i=0;i<M;i++){
            for(int j=0;j<N;j++){
                if(!arr[i][j] && !visited[i][j]){
                    bfs(i, j);
                    count++;
                }
            }
        }
        Collections.sort(answer);	//영역의 넓이 오름차순 정렬
        bw.write(count + "\n");		//영역의 개수 BufferedWriter 저장
        //각 영역의 넓이 BufferedWriter 저장
        for (Integer integer : answer)
            bw.write(integer + " ");
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    static void fillArr(int x1, int y1, int x2, int y2){
        for(int i=y1;i<y2;i++){
            for(int j=x1;j<x2;j++){
                arr[i][j] = true;
            }
        }
    }
    //모눈종이를 BFS탐색하여 각 영역을 나누는 함수
    static void bfs(int y, int x){
        Queue<position> q = new LinkedList<>();
        q.add(new position(x, y));
        visited[y][x] = true;
        int width = 1;
        while(!q.isEmpty()){
            position cur = q.poll();
            //인접한 공간 탐색
            for(int i=0;i<4;i++){
                int tempX = cur.x + dx[i];
                int tempY = cur.y + dy[i];
                //직사각형이 채워지지 않은 영역일 때
                if(inSpace(tempX,tempY) && !visited[tempY][tempX] && !arr[tempY][tempX]){
                    q.add(new position(tempX,tempY));
                    width++;
                    visited[tempY][tempX] = true;
                }
            }
        }
        answer.add(width);	//현재 영역 저장
    }
    //BFS탐색에서 이동시 모눈종이에 영역에 있는지 확인하는 함수
    static boolean inSpace(int x, int y){
        if(x>=0 && y>=0 && y< M && x < N)
            return true;
        return false;
    }
}
