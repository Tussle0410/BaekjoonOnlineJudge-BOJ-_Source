import java.io.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main{
    //사각형 판 위치 관련 클래스
    static class position{
        int x, y;	//x : x좌표, y : y좌표
        //생성자
        public position(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int[][] map;		//사각형 판에 대한 배열
    static int[] dx = {0, 0, -1, 1};	//상하좌우 x변경값
    static int[] dy = {-1, 1, 0, 0};	//상하좌우 y변경값
    static int N,M;
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new int[N][M];
        int cheese = 0;	//현재 치즈의 개수
        //사각형 판에 대한 정보 저장
        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j<M;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
                if(map[i][j] == 1)	//치즈일 때
                    cheese++;
            }
        }
        //처음부터 치즈가 없을 때
        if(cheese == 0)
            bw.write("0\n0");
        else{
            int time = 0;	//지나간 시간
            //시뮬레이션 진행
            while(true){
                time++;	//1시간 지나기!
                int removeCheese = bfs();	//외부 공기와 만나는 치즈 BFS 탐색
                if(cheese == removeCheese)	//현재 모든 치즈가 다 녹을 때
                    break;
                cheese -= removeCheese;	//치즈 녹기!
            }
            //지나간 시간과 1시간전 치즈 개수 BufferedWriter 저장
            bw.write(time + "\n" + cheese);
        }
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //외부 공기와 만나는 치즈를 찾기위해 BFS탐색하는 함수
    static int bfs(){
        boolean[][] visited = new boolean[N][M];	//방문 확인 배열
        Queue<position> queue = new LinkedList<>();	//BFS에 사용할 Queue
        Queue<position> hole = new LinkedList<>();	//외부 공기와 만나는 치즈 저장 Queue
        //(0, 0)은 항상 외부 공기! (0, 0)부터 탐색진행!
        queue.add(new position(0, 0));
        visited[0][0] = true;	//(0, 0) 방문 확인
        //탐색 진행
        while(!queue.isEmpty()){
            position cur = queue.poll();
            //좌표 이동
            for(int i=0;i<4;i++){
                int tempX = cur.x + dx[i];
                int tempY = cur.y + dy[i];
                if(inSpace(tempX,tempY) && !visited[tempY][tempX]){
                    visited[tempY][tempX] = true;
                    if(map[tempY][tempX] == 1) {	//외부 공기와 만나는 치즈일 때
                        hole.add(new position(tempX, tempY));
                    }else	//외부 공기일 때
                        queue.add(new position(tempX, tempY));
                }
            }
        }
        //외부 공기와 만난 치즈들 녹기 진행!
        for(position cur : hole) {
            map[cur.y][cur.x] = 0;
        }
        return hole.size();	//녹은 치즈 개수 반환
    }
    //BFS탐색으로 좌표 이동시 사각형 판에 존재하는 좌표인지 확인하는 함수
    static boolean inSpace(int x, int y){
        if(x >= 0 && y >= 0 && x < M && y < N)
            return true;
        return false;
    }
}
