import java.io.*;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main{
    //뱀 관련 정보 클래스
    static class snake{
        //move : 이동한 횟수, y : y축 위치, x : x축 위치, d : 다음 이동 방향
        int move, y, x, d;
        //생성자
        public snake( int move, int y, int x, int d){
            this.move = move;
            this.y = y;
            this.x = x;
            this.d = d;
        }
    }
    static int[][] board;	//게임 보드 정보 배열
    static int[] dy = {-1, 0, 1, 0};	//상우하좌 y변경값
    static int[] dx = {0, 1, 0, -1};	//상우하좌 x변경값
    static int[] directions = new int[10001];	//방향 변경 저장 배열
    static Queue<snake> snakes = new LinkedList<>();	//뱀의 정보 저장 Queue
    static int N;
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        int K = Integer.parseInt(br.readLine());
        StringTokenizer st;
        board = new int[N+1][N+1];
        //사과 정보 Board 배열에 저장!
        for(int i=0;i<K;i++){
            st = new StringTokenizer(br.readLine()," ");
            int y = Integer.parseInt(st.nextToken());
            int x = Integer.parseInt(st.nextToken());
            board[y][x] = 2;	//사과 : 2
        }
        int L = Integer.parseInt(br.readLine());
        //방향전환 정보 저장
        for(int i=0;i<L;i++){
            st = new StringTokenizer(br.readLine()," ");
            int X = Integer.parseInt(st.nextToken());
            String C = st.nextToken();
            if(C.equals("L"))	//왼쪽(L) : 1
                directions[X] = 1;
            else		//오른쪽(D) : 2
                directions[X] = 2;
        }
        //초기 뱀의 위치 저장
        snakes.add(new snake(0,1, 1, 1));
        board[1][1] = 1;	//초기 뱀의 위치 Board에 반영
        int answer = gameStart();	//시뮬레이션 진행!
        bw.write(answer + "");	//진행된 초 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //뱀 게임 시뮬레이션 진행하는 함수
    static int gameStart(){
        //시뮬레이션 진행!
        while(true){
            int size = snakes.size();	//현재 뱀의 길이 저장
            boolean eating = false;		//사과 먹는지 확인 변수
            //뱀 이동 진행!
            for(int i=0;i<size;i++){
                snake cur = snakes.poll();
                board[cur.y][cur.x] = 0;
                //이동방향에 맞게 이동!
                int tempX = cur.x + dx[cur.d];
                int tempY = cur.y + dy[cur.d];
                //벽이나 자기자신과 부딪힐 때
                if(!inSpace(tempY, tempX) || board[tempY][tempX] == 1)
                    return cur.move + 1;	//게임 종료!
                else{		//뱀이 이동을 성공하였을 때
                    int tempM = cur.move+1;	//이동 + 1
                    int tempD = cur.d;	//방향 저장
                    if(directions[tempM] == 2)	//'D'로 방향전환 일어날 때
                        tempD = cur.d+1 == 4? 0 : cur.d+1;
                    else if(directions[tempM] == 1)	//'L'로 방향전환 일어날 때
                        tempD = cur.d-1 == -1? 3 : cur.d-1;
                    //이동한 뱀의 정보 Queue 저장
                    snakes.add(new snake(tempM, tempY,tempX, tempD));
                    //뱀의 머리가 사과를 먹었을 때
                    if(i == 0 && board[tempY][tempX] == 2)
                        eating = true;
                    //사과를 먹었을 때 뱀의 꼬리는 이동 및 현재 위치도 추가!
                    if(i == size-1 && eating){
                        board[cur.y][cur.x] = 1;
                        snakes.add(cur);	//현재 위치 추가
                    }
                    board[tempY][tempX] = 1;	//뱀 이동한 공간 Board에 반영
                }
            }
        }
    }
    //공간에 존재하는지 확인 함수(벽에 부딪히는지 확인)
    static boolean inSpace(int y, int x){
        if(y > 0 && y<=N && x>0 && x<=N)	//벽에 부딪히지 않을 때
            return true;
        return false;	//벽에 부딪힐 때
    }
}
