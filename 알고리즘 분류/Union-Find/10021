import java.util.*;
import java.io.*;

public class Main {
    //파이프의 설치 관련 좌표 클래스
    static class position{
        int x, y;
        public position(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    //설치된 파이프 관련 클래스
    static class node{
        int f1, f2, value;
        public node(int f1, int f2, int value) {
            this.f1 = f1;
            this.f2 = f2;
            this.value = value;
        }
    }
    static int N,C;
    static int[] root;		//Union-Find 관련 root 배열
    static ArrayList<position> field = new ArrayList<>();	//좌표 저장 리스트
    static ArrayList<node> line = new ArrayList<>();	//파이프 관련 저장 리스트
    static public void  main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        N = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());
        root = new int[N];
        //root 배열 초기화
        for(int i=0;i<N;i++)
            root[i] = i;
        //설치 좌표 저장
        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine()," ");
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            field.add(new position(x, y));
        }
        makeNode();		//브루트포스로 설치 가능한 모든 파이프 구하기
        //파이프 설치 비용 관련 오름차순 정렬
        Collections.sort(line, new Comparator<node>() {
            @Override
            public int compare(node o1, node o2) {
                return o1.value-o2.value;
            }
        });
        int result = 0;
        //최소 신장 트리 만들기
        for(int i=0;i<line.size();i++){
            int f1 = line.get(i).f1;
            int f2 = line.get(i).f2;
            int value = line.get(i).value;
            if(union(f1, f2)){
                result += value;
            }
        }
        //모든 좌표가 연결되었는지 확인
        for(int i=0;i<N;i++){
            if(find(i) != 0){
                result = -1;
                break;
            }
        }
        bw.write(result + "\n");		//최소 신장 트리 가중치 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //Union-Find에서 Root 노드 찾는 함수
    static int find(int n){
        if(root[n] == n)
            return n;
        return root[n] = find(root[n]);
    }
    //Union-Find에서 Root 노드 변경 및 비교 함수
    static boolean union(int a, int b){
        int x = find(a);
        int y = find(b);
        if(x!=y){
            if(x>y)
                root[x] = y;
            else
                root[y] = x;
            return true;
        }
        return false;
    }
    //브루트포스로 모든 파이프의 경우 만드는 함수
    static void makeNode(){
        int size = field.size();
        for(int i=0;i<size;i++){
            for(int j=i+1;j<size;j++){
                int width = pipeWidthCal(field.get(i), field.get(j));
                if(lineLimitCheck(width))
                    line.add(new node(i,j,width));
            }
        }
    }
    //파이프 설치 비용을 계산하는 함수
    static int pipeWidthCal(position p1, position p2){
        return (int)(Math.pow(p1.x-p2.x,2) + Math.pow(p1.y-p2.y,2));
    }
    //파이프 설치 비용이 C보다 작은지 확인하는 함수
    static boolean lineLimitCheck(int value){
        if(value>=C)
            return true;
        return false;
    }
}
