import java.io.*;
import java.util.StringTokenizer;

public class Main{
    static boolean[][] check;	//가로선 확인 배열
    static int N,M,H, answer = 4;
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        //N, M, H 입력값 저장
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        H = Integer.parseInt(st.nextToken());
        check = new boolean[H+1][N+1];
        //초기 가로선 정보 저장
        for(int i=0;i<M;i++){
            st = new StringTokenizer(br.readLine()," ");
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            check[a][b] = true;	//가로선 추가!
        }
        //가로선을 추가하지 않아도 조건에 만족할 때
        if(gameStart()){
            bw.write("0");		//1개도 추가하지 않았으므로 0을 BufferedWriter 저장
        }else{
            search(1, 1, 0);	//가로선 추가하는 모든 경우 탐색
            //가로선을 3개 초과해서 사용해야 하거나 조건에 맞게 만들지 못할 때
            if(answer > 3)
                bw.write("-1");		//-1 BufferedWriter 저장
            else		//조건에 만족하는 최소 가로선 조작횟수 BufferdWriter 저장
                bw.write(answer + "");
        }
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //가로선 추가 모든 경우를 탐색하는 재귀 함수
    static void search(int count, int y, int x){
        //가로선 추가 횟수 3번 초과 및 1번만 추가했을 때 조건에 만족할 때
        if(count > 3 || answer == 1)
            return;
        //가로선 추가하는 경우 탐색
        for(int i=x+1;i<N;i++){
            //가로선이 있거나 좌우에 인접한 가로선이 있을 때
            if(check[y][i-1] || check[y][i+1] || check[y][i])
                continue;
            check[y][i] = true;
            //가로선 추가했을 때 조건에 만족할 때
            if(gameStart()){
                answer = Math.min(answer, count);
                check[y][i] = false;
                return;
            }
            search(count+1, y, i);
            check[y][i] = false;
        }
        for(int i=y+1;i<=H;i++){
            for(int j=1;j<N;j++){
                //가로선이 있거나 좌우에 인접한 가로선이 있을 때
                if(check[i][j-1] || check[i][j+1] || check[i][j])
                    continue;
                check[i][j] = true;
                //가로선 추가했을 때 조건에 만족할 때
                if(gameStart()){
                    answer = Math.min(answer, count);
                    check[i][j] = false;
                    return;
                }
                search(count+1, i, j);
                check[i][j] = false;
            }
        }
    }
    //사다리 게임 시뮬레이션 진행하는 함수
    static boolean gameStart(){
        //각 세로선 탐색
        for(int i=1;i<=N;i++){
            int height = H;	//최대 높이
            int position = i;	//현재 위치
            //시뮬레이션 진행
            while(height>0){
                //왼쪽 가로선 존재시
                if(check[height][position-1]){
                    position--;
                    height--;
                    continue;
                }
                //오른쪽 가로선 존재시
                if(check[height][position])
                    position++;
                height--;	//높이 감소
            }
            //세로선이 도착했을 때 동일하지 못할 경우 시뮬레이션 종료!
            if(position != i)
                return false;
        }
        return true;	//조건에 만족할 때
    }
}
