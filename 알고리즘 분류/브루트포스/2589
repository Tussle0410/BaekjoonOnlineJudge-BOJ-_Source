import java.io.*;
import java.util.*;


public class Main {
    //지도 위치 정보 관련 클래스
    static class position{
        int x, y, count;
        public position(int x, int y, int count){
            this.x = x;
            this.y = y;
            this.count = count;	//이동한 횟수
        }
    }
    static int L,W, max = Integer.MIN_VALUE;
    static char[][] map;	//지도 정보 배열
    static boolean[][] visited;	//방문 확인 배열
    static int[] dx = {0, 0, -1, 1};	//상하좌우 X변경값
    static int[] dy = {-1, 1, 0, 0};	//상하좌우 Y변경값
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        L = Integer.parseInt(st.nextToken());
        W = Integer.parseInt(st.nextToken());
        map = new char[L][W];
        //지도 정보 저장
        for(int i=0;i<L;i++){
            String str = br.readLine();
            for(int j=0;j<W;j++)
                map[i][j] = str.charAt(j);
        }
        //각 땅에서 다른 땅에 최단 거리 구하는 BFS 탐색
        for(int i=0;i<L;i++){
            for(int j=0;j<W;j++){
                if(map[i][j] == 'L')
                    bfs(i, j);
            }
        }
        bw.write(max + "");	//최단 거리들에서 가장 큰 값 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //최단 거리를 구하는 BFS함수
    static void bfs(int y, int x){
        Queue<position> q = new LinkedList<>();
        visited = new boolean[L][W];
        visited[y][x] = true;
        int count = 0;
        q.add(new position(x, y, 0));
        while(!q.isEmpty()){
            position cur = q.poll();
            boolean check = false;
            //상하좌우 인접한 공간 탐색
            for(int i=0;i<4;i++){
                int tempX = dx[i] + cur.x;
                int tempY = dy[i] + cur.y;
                //인접한 공간이 방문하지 않았던 땅인 경우.
                if(inSpace(tempX,tempY) && !visited[tempY][tempX] && map[tempY][tempX]== 'L'){
                    visited[tempY][tempX] = true;
                    q.add(new position(tempX,tempY, cur.count+1));
                    check = true;
                }
            }
            if(!check)
                count = Math.max(cur.count,  count);
        }
        max = Math.max(max, count);
    }
    //BFS탐색으로 이동하려는 공간이 존재하는지 확인하는 함수
    static boolean inSpace(int x, int y){
        if(x>=0 && y>=0 && x<W && y<L)
            return true;
        return false;
    }
}
