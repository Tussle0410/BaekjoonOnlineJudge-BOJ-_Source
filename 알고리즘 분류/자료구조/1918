import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Stack;

public class Main {
    public static void main(String[] args) throws IOException{
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String str  = br.readLine();
        Stack<Character> operator = new Stack<>();	//연산자 저장 Stack
        StringBuilder sb = new StringBuilder();
        //중위 표기식 수식 탐색!
        for(int i=0;i<str.length();i++){
            char c = str.charAt(i);
            if(c >= 65 && c <= 90)	//알파벳일 때
                sb.append(c);	//그대로 출력!
            else if(c == '('){	//'('일 때 
                operator.push(c);	//Stack에 Push!
            }else if(c == ')'){		//')'일 때
                //'('만날 때까지 Stack Pop!
                while(!operator.isEmpty()){
                    char temp = operator.pop();
                    if(temp == '(')
                        break;
                    else
                        sb.append(temp);
                }
            }else{		// +, -, *, / 일 때
               //첫 연산자일 경우 그대로 Push!
               if(operator.isEmpty()) {
                   operator.push(c);
                   continue;
               }
               //우선순위 확인 Stack값 Push, Pop 진행!
               int c_priority = operatorPriority(c);
               while(!operator.isEmpty()){
                   int priority = operatorPriority(operator.peek());
                   if(priority >= c_priority)	//우선순위가 낮거나 같을 때
                       sb.append(operator.pop());
                   else
                       break;
               }
               operator.push(c);	//현재 연산자 저장!
            }
        }
        while(!operator.isEmpty())	//남은 연산자 존재하면 Pop!
            sb.append(operator.pop());
        bw.write(sb.toString());		//후위 표기식 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //연산자 우선순위 결정해주는 함수
    static int operatorPriority(char c){
        if(c == '+' || c == '-')		// + , - : 1
            return 1;
        else if(c == '*' || c == '/')	// * , / : 2
            return 2;
        else		// ( : 0
            return 0;
    }
}
