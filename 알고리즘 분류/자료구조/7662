import java.util.*;
import java.io.*;

class Main {

    public static void main(String args[]) throws IOException{
        //입력값 처리하는 BufferdReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int T = Integer.parseInt(br.readLine());
        StringTokenizer st;
        //각 테스트케이스 진행
        for(int test_case=0;test_case < T;test_case++){
            PriorityQueue<Integer> up = new PriorityQueue<>();	//오름차순 Up
            //내림차순 Down
            PriorityQueue<Integer> down = new PriorityQueue<>(Comparator.reverseOrder());
            HashMap<Integer, Integer> cnt = new HashMap<>();	//cnt
            int N = Integer.parseInt(br.readLine());
            int size = 0;	//큐에 저장된 개수
            //명령어 진행
            for(int i=0;i<N;i++){
                st = new StringTokenizer(br.readLine()," ");
                //명령어 저장
                char command = st.nextToken().charAt(0);
                int value = Integer.parseInt(st.nextToken());
                if(command == 'I'){		//'I' 진행
                    //큐에 저장
                    up.add(value);
                    down.add(value);
                    //cnt + 1
                    cnt.put(value, cnt.getOrDefault(value, 0) + 1);
                    size++;	//큐 개수 증가!
                }else {
                    //'D' 진행
                    if (size <= 0)	//현재 큐가 비어있으면 넘기기
                        continue;
                    size--;		//큐 개수 감소
                    if (value == -1) {	//최소값 제거
                        poll(up, cnt);
                    } else		//최대값 제거
                        poll(down, cnt);
                }
            }
            //큐가 비어있을 때
            if(size <= 0)
                bw.write("EMPTY\n");
            else{	//최대값, 최소값 BufferedWriter 저장
                bw.write( getNum(down, cnt)+ " " + getNum(up, cnt) + "\n");
            }
        }
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //'D' 명령어로 최소값이나 최대값 제거 진행하는 함수
    static void poll(PriorityQueue<Integer> pq, HashMap<Integer, Integer> cnt){
        //큐에 존재하는 최대값이나 최소값 탐색
        while(!pq.isEmpty()){
            int temp = pq.poll();
            if(cnt.get(temp) == 0)	//큐에 존재하지 않는 수일 때
                continue;
            cnt.put(temp, cnt.get(temp) - 1);	//최대값이나 최소값 제거!
            break;
        }
    }
    //최대값이나 최소값 구하는 함수
    static int getNum(PriorityQueue<Integer> pq, HashMap<Integer, Integer> cnt){
        //큐에 존재하는 값 탐색
        while(!pq.isEmpty()){
            int temp = pq.poll();
            if(cnt.get(temp) == 0)	//큐에 존재하지 않는 값일 때
                continue;
            return temp;	//최대값이나 최소값 반환
        }
        return -1;
    }
}
