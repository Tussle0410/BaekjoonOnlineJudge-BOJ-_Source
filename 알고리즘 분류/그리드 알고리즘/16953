import java.io.*;
import java.util.*;


public class Main {
    public static void main(String[] args) throws IOException{
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        //입력되는 두 숫자 저장
        int start = Integer.parseInt(st.nextToken());
        int end = Integer.parseInt(st.nextToken());
        bw.write(search(start, end) + "");	//BFS 탐색 결과 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //BFS탐색을 진행하는 함수
    static int search(int start, int end){
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[end+1];	//방문 확인 함수
        q.add(start);
        visited[start] = true;
        int answer = 0;
        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                int cur = q.poll();
                if(cur == end)		// B 숫자에 도착
                    return answer+1;	//최소 연산 횟수 + 1 반환
                long temp = cur * 2L;	//연산 1. ×2 진행
                if(temp <= end && !visited[(int) temp]){
                    visited[(int)temp] = true;
                    q.add((int) temp);
                }
                temp = cur * 10L + 1;	//연산 2. 오른쪽에 1 추가하기
                if(temp <= end && !visited[(int) temp]){
                    visited[(int)temp] = true;
                    q.add((int) temp);
                }
            }
            answer++;

        }
        return -1;
    }
}
