import java.io.*;

public class Main{
    static int G, P, answer = 0;
    static int[] parent;	//Union-Find에 게이트 관련 사용할 배열
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        G = Integer.parseInt(br.readLine());
        P = Integer.parseInt(br.readLine());
        parent = new int[G+1];
        //parent[] 배열 초기화
        for(int i=0;i<=G;i++)
            parent[i] = i;
        //각 비행기 Union-Find로 게이트 도킹 시도!
        for(int i=0;i<P;i++){
            int g = Integer.parseInt(br.readLine());
            int pg = find(g);	//도킹할 게이트 구하기
            if(pg==0)	//도킹이 불가능, 공항 폐쇄!
                break;
            union(pg, pg-1);	//도킹 성공 및 다음 도킹할 게이트 설정
            answer++;	//비행기 횟수 증가
        }
        bw.write(answer + "");	//비행기 개수 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //Union-Find에 대표값 찾는 Find 함수
    static int find(int n){
        if(parent[n] == n)
            return n;
        return parent[n] = find(parent[n]);
    }
    //Union-Find에 두 집합 대표값 같게 만드는 Union 함수
    static void union(int a, int b){
        int pa = find(a);
        int pb = find(b);
        //b의 값에 g-1값이 들어가기 때문에 parent[pa]값을 변경합니다.
        if(pa != pb)
            parent[pa] = pb;
    }
}
