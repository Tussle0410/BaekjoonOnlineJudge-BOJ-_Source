import java.util.*;
import java.io.*;

public class Main {
    static int N,Q;
    static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();	//그래프 정보 저장
    static int[][] nodeValue;		//선분 가중치 저장 배열
    static public void  main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        N = Integer.parseInt(st.nextToken());
        Q = Integer.parseInt(st.nextToken());
        nodeValue = new int[N+1][N+1];
        //리스트 초기화
        for(int i=0;i<=N;i++){
            graph.add(new ArrayList<>());
        }
        //그래프 및 선분 가중치 저장
        for(int i=0;i<N-1;i++){
            st = new StringTokenizer(br.readLine()," ");
            int p = Integer.parseInt(st.nextToken());
            int q = Integer.parseInt(st.nextToken());
            int r = Integer.parseInt(st.nextToken());
            if(nodeValue[p][q] < r){
                graph.get(p).add(q);
                graph.get(q).add(p);
                nodeValue[p][q] = r;
                nodeValue[q][p] = r;
            }

        }
        //Q개의 k, v을 받아 탐색하여 BufferedWriter 저장
        for(int i=0;i<Q;i++){
            st = new StringTokenizer(br.readLine()," ");
            int k = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            bw.write(bfs(k,v) + "\n");
        }
        bw.flush();		//결과 출력
        bw.close();
        br.close();

    }
    //k와 v에 따른 BFS 탐색
    static int bfs(int k, int v){
        int count = 0;
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[N+1];
        visited[v] = true;
        queue.add(v);
        while(!queue.isEmpty()){
            int cur = queue.poll();
            for(Integer next : graph.get(cur)){
            	//인접한 동영상의 선분 가중치가 K보다 작을 때
                if(nodeValue[cur][next] >= k && !visited[next]){
                    queue.add(next);
                    visited[next] = true;
                    count++;
                }
            }
        }
        return count;
    }
}
