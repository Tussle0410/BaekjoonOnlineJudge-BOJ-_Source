import java.util.*;
import java.io.*;

public class Main {
    //체스판 위치 관련 클래스
    static class position{
        int x, y, direction;
        public position(int x, int y, int direction) {
            this.x = x;
            this.y = y;
            this.direction = direction;
        }
    }
    static int N,K;
    static ArrayList<Integer>[][] stack;	//체스판에 쌓여있는 체스말 저장 배열
    static position[] piece;	//체스말 위치 저장 배열
    static int[][] board;	//체스판에 대한 정보 저장 배열
    static int[] dx = {1, -1, 0, 0};	//상하좌우 x 변경값
    static int[] dy = {0, 0, -1, 1};	//상하좌우 y 변경값
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        stack = new ArrayList[N][N];
        board = new int[N][N];
        piece = new position[K];
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++){
                stack[i][j] = new ArrayList<>();
            }
        }
        //체스판 정보 저장
        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j<N;j++)
                board[i][j] = Integer.parseInt(st.nextToken());
        }
        //체스말 정보 저장
        for(int i=0;i<K;i++){
            st = new StringTokenizer(br.readLine()," ");
            int y = Integer.parseInt(st.nextToken())-1;
            int x = Integer.parseInt(st.nextToken())-1;
            int direction = Integer.parseInt(st.nextToken())-1;
            piece[i] = new position(x,y,direction);
            stack[y][x].add(i);
        }
        bw.write(gameStart() + "");	//게임 시작으로 최소 턴 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //게임을 진행하여 4개가 쌓이는 최소 턴을 구하는 함수
    static int gameStart(){
        int answer = 1;
        while(true){
            if(answer>1000)		//1000턴을 넘어갔을 때
                return -1;
            for(int i=0;i<K;i++){
                position cur = piece[i];
                //x, y값 방향대로 이동
                int x = cur.x + dx[cur.direction];
                int y = cur.y + dy[cur.direction];
                if(!inBoard(x,y) || board[y][x] == 2){	//이동하려는 칸이 파란칸일 때
                    cur.direction = directionChange(cur.direction);	//방향 바꾸기
                    //x,y값 방향대로 이동
                    x = cur.x + dx[cur.direction];
                    y = cur.y + dy[cur.direction];
                    piece[i].direction = cur.direction;	//방향 저장
                    if(inBoard(x,y)) {
                        if (board[y][x] == 0) {	//바꾼 뒤 이동하려는 칸이 하얀색
                            whiteMove(cur.x, cur.y, x, y, i);
                        } else if (board[y][x] == 1) {	//바꾼 뒤 이동하려는 칸이 빨간색
                            redMove(cur.x, cur.y, x, y, i);
                        }
                    }
                }else if(board[y][x] == 0){		//이동하려는 칸이 하얀색
                    whiteMove(cur.x, cur.y, x, y, i);
                }else if(board[y][x] == 1){		//이동하려는 칸이 빨간색
                    redMove(cur.x,cur.y, x, y, i);
                }
                if(stackCheck(piece[i].x,piece[i].y))	//게임 종료 조건에 만족할 때
                    return answer;
            }
            answer++;		//턴 증가
        }
    }
    //하얀색 칸으로 이동할 때 함수
    static void whiteMove(int x, int y, int nx, int ny, int id){
        int size = stack[y][x].size();
        int index = stack[y][x].indexOf(id);
        //역순으로 쌓기
        for(int i=index;i<size;i++){
            int pieceNum = stack[y][x].get(index);
            stack[ny][nx].add(pieceNum);
            stack[y][x].remove(index);
            piece[pieceNum].x = nx;
            piece[pieceNum].y = ny;
        }
    }
    //빨간색 칸으로 이동할 때 함수
    static void redMove(int x, int y, int nx, int ny, int id){
        int size = stack[y][x].size();
        int index = stack[y][x].indexOf(id);
        //정순으로 쌓기
        for(int i=size-1;i>=index;i--){
            int pieceNum = stack[y][x].get(i);
            stack[ny][nx].add(pieceNum);
            stack[y][x].remove(i);
            piece[pieceNum].x = nx;
            piece[pieceNum].y = ny;
        }
    }
    //방향 바꾸는 함수
    static int directionChange(int direction){
        if(direction==0)
            return 1;
        else if(direction==1)
            return 0;
        else if(direction==2)
            return 3;
        else
            return 2;
    }
    //좌표가 체스판 안에 존재하는지
    static boolean inBoard(int x, int y){
        if(x>=0 && y>=0 && x<N && y<N)
            return true;
        return false;
    }
    //체스말이 4개 이상 쌓여있을 때
    static boolean stackCheck(int x, int y){
        if(stack[y][x].size()>=4)
            return true;
        return false;
    }
}
