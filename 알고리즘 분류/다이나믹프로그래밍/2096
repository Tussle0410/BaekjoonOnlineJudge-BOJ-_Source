import java.io.*;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException{
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int N = Integer.parseInt(br.readLine());
        StringTokenizer st;
        int[][] score = new int[N][3];	//입력되는 점수 저장 배열
        int[][] minDP = new int[3][N];	//최소값 메모이제이션
        int[][] maxDP = new int[3][N];	//최대값 메모이제이션
        //입력되는 점수값 저장!
        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0;j<3;j++)
                score[i][j] = Integer.parseInt(st.nextToken());
        }
        //minDP[][], maxDP[][] 초기값 설정!
        minDP[0][0] = maxDP[0][0] = score[0][0];
        minDP[1][0] = maxDP[1][0] = score[0][1];
        minDP[2][0] = maxDP[2][0] = score[0][2];
        //minDP[][], maxDP[][] 점화식을 이용한 값 저장!
        for(int i=1;i<N;i++){
            //maxDP[][] 구성!
            maxDP[0][i] = Math.max(maxDP[0][i-1], maxDP[1][i-1]) + score[i][0];
            maxDP[1][i] = Math.max(maxDP[0][i-1], Math.max(maxDP[1][i-1], maxDP[2][i-1])) + score[i][1];
            maxDP[2][i] = Math.max(maxDP[1][i-1], maxDP[2][i-1]) + score[i][2];

            //minDP[][] 구성!
            minDP[0][i] = Math.min(minDP[0][i-1], minDP[1][i-1]) + score[i][0];
            minDP[1][i] = Math.min(minDP[0][i-1], Math.min(minDP[1][i-1], minDP[2][i-1])) + score[i][1];
            minDP[2][i] = Math.min(minDP[1][i-1], minDP[2][i-1]) + score[i][2];
        }
        //minDP[][]에 최소값, maxDP[][] 최대값 구하기!
        int max = Math.max(maxDP[0][N-1], Math.max(maxDP[1][N-1] , maxDP[2][N-1]));
        int min = Math.min(minDP[0][N-1], Math.min(minDP[1][N-1] , minDP[2][N-1]));
        bw.write(max + " " + min);	//최대값, 최소값 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
}
