import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.StringTokenizer;

public class Main{
    //트리 정보 관련 클래스
    static class node{
        HashMap<String, node> child;
        public node(){
            child = new HashMap<>();
        }
    }
    static int N;
    static node root = new node();
    static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws IOException{
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());
        //개미굴 구조 만들기
        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine()," ");
            int K = Integer.parseInt(st.nextToken());
            node cur = root;
            for(int j=0;j<K;j++){
                String temp = st.nextToken();
                if(!cur.child.containsKey(temp)){
                    cur.child.put(temp, new node());
                }
                cur = cur.child.get(temp);
            }
        }
        //개미굴에 시각화시키기
        print(root, "");
        bw.write(sb +"");	//시각화한 결과 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //개미굴 시각화한 구조 만드는 함수
    static void print(node cur, String s){
        //현재 방에 자식 구조 가져오기
        ArrayList<String> list = new ArrayList<>(cur.child.keySet());
        Collections.sort(list);		//사전 순 정렬
        //정렬 이후 사전 순으로 표시 후 탐색
        for(String str : list){
            sb.append(s).append(str).append("\n");
            print(cur.child.get(str), s +"--");
        }
    }
}
