import java.io.*;
import java.util.*;


public class Main {
    //현재 정사각형의 위치를 나타내는 클래스
    static class position{
        int x, y;
        public position(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int[][] map;		//땅 , 바다 정보 저장 배열
    //가로, 세로, 대각선 움직이는 X변경값
    static int[] dx = {-1, 0, 1, -1, 1, -1, 0, 1};
    //가로, 세로, 대각선 움직이는 Y변경값
    static int[] dy = {-1, -1, -1, 0, 0, 1, 1, 1};
    static boolean[][] visited;		//땅 방문 확인 배열
    static int index, w, h;
    public static void main(String[] args) throws IOException{
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        //각 테스트케이스 진행
        while(true){
            st = new StringTokenizer(br.readLine()," ");
            //w, h 저장
            w = Integer.parseInt(st.nextToken());
            h = Integer.parseInt(st.nextToken());
            if(w == 0 && h == 0)
                break;
            map = new int[h][w];
            visited = new boolean[h][w];
            index = 1;
            //땅, 바다 정보 저장
            for(int i=0;i<h;i++){
                st = new StringTokenizer(br.readLine()," ");
                for(int j=0;j<w;j++)
                    map[i][j] = Integer.parseInt(st.nextToken());
            }
            //BFS 탐색 진행
            for(int i=0;i<h;i++){
                for(int j=0;j<w;j++)
                    //해당 정사각형이 땅이고 방문한 곳이 아닌 경우 탐색 진행
                    if(!visited[i][j] && map[i][j] == 1){
                        bfs(i, j);		//BFS 탐색
                        index++;		//섬의 개수 증가
                    }
            }
            bw.write((index-1) + "\n");	//현재 테스트케이스 섬의 개수 BufferedWriter 저장
        }
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //BFS탐색을 진행하는 함수
    static void bfs(int y, int x){
        Queue<position> q = new LinkedList<>();
        q.add(new position(x, y));
        while(!q.isEmpty()){
            position cur = q.poll();
            //가로, 세로, 대각선 주변 탐색
            for(int i=0;i<8;i++){
                int tempX = cur.x + dx[i];
                int tempY = cur.y + dy[i];
                //지도에 벗어나지 않고, 방문하지 않았으며 땅인 경우
                if(mapCheck(tempX,tempY) && !visited[tempY][tempX] && map[tempY][tempX] == 1){
                    visited[tempY][tempX] = true;
                    q.add(new position(tempX,tempY));
                }
            }
        }
    }
    //공간 이동 시 지도에 벗어나는지 확인하는 함수
    static boolean mapCheck(int x, int y){
        //공간에 벗어나지 않았을 때
        if(x >= 0 && y >= 0 && x < w && y < h)
            return true;
        return false;
    }
}
