import java.io.*;
import java.util.StringTokenizer;

public class Main{
    static char[][] board;	//보드 정보 저장 배열
    static boolean[] visited = new boolean[26];	//알파벳 사용 확인 배열
    static int R, C, answer = 0;
    static int[] dy = {-1, 1, 0, 0};	//상하좌우 y변경값
    static int[] dx = {0, 0, -1, 1};	//상하좌우 x변경값
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());
        board = new char[R][C];
        //보드 정보 저장
        for(int i=0;i<R;i++){
            String str = br.readLine();
            for(int j=0;j<C;j++)
                board[i][j] = str.charAt(j);
        }
        //1행 1열의 알파벳 사용 확인
        visited[charOfInt(board[0][0])] = true;
        dfs(0, 0, 1);	//DFS로 말 이동하는 모든 경우 탐색
        bw.write(answer + "");	//최대 이동 거리 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //DFS탐색으로 말의 이동 모든 경우 탐색 함수
    static void dfs(int x, int y, int count){
        boolean check = false;	//말이 이동하는지 확인 변수
        //말 상하좌우 탐색
        for(int i=0;i<4;i++){
            //상하좌우 x와 y 변경
            int tempX = x + dx[i];
            int tempY = y + dy[i];
            //문제 조건에 만족하도록 말이 이동할 때
            if(inSpace(tempX, tempY) && !visited[charOfInt(board[tempY][tempX])]){
                //이동하는 칸에 알파벳 번호 구하기
                int index = charOfInt(board[tempY][tempX]);
                visited[index] = true;	//알파벳 사용
                dfs(tempX,tempY, count+1);	//다음칸 탐색
                visited[index] = false;	//알파벳 미사용
                check = true;	//말이 이동을 확인
            }
        }
        //말이 이동하지 않았을 때 = 최종 목적지 도착
        if(!check)
            answer = Math.max(answer, count);
    }
    //대문자 알파벳 -> Int형 변경 함수
    static int charOfInt(char c){
        return c - 65;
    }
    //말 이동시 보드안에 존재하는지 확인하는 함수
    static boolean inSpace(int x, int y){
        if(y < R && y>=0 && x<C && x>=0)
            return true;
        return false;
    }
}
