import java.io.*;
import java.util.StringTokenizer;

public class Main {
    static int N;
    static int[] num;	//입력되는 숫자 저장 배열
    static long[][] DP;	//상근이가 해결하는 연산 개수 저장하는 메모이제이션 배열
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        num = new int[N];
        DP = new long[N+1][21];
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        //입력되는 숫자들 저장
        for(int i=0;i<N;i++)
            num[i] = Integer.parseInt(st.nextToken());

        //숫자들의 연산을 만들어가며 만들 수 있는 연산의 개수를 구해서 BufferedWriter 저장
        bw.write(search(1, num[0], String.valueOf(num[0])) + "");
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //상근이가 숫자들을 이용해서 해결할 수 있는 연산의 개수를 구하는 함수
    static long search(int count, int value, String str){

        if(count==N-1){	//연산 완성시
            if(num[N-1] == value){
                return 1;
            }
            return 0;
        }

        if(DP[count][value]!= 0)	//먼저 방문했을 경우
            return DP[count][value];

        if(value + num[count] <= 20)	// +
            DP[count][value] += search(count+1, value + num[count], str + "+" + num[count]);

        if(value - num[count] >=0)	// -
            DP[count][value] += search(count+1, value - num[count], str + "-" + num[count]);

        return DP[count][value];
    }
}
