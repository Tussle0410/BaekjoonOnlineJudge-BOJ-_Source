import java.io.*;
import java.util.*;
public class Main{
	static int n,result;
	static int[] sequence;	//입력된 수열의 값 저장 배열
	static int[][] DP;		//메모이제이션 배열
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //--------입력값 저장 및 배열 초기화--------
    	n = Integer.parseInt(br.readLine());
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	sequence = new int[n+1];
    	DP = new int[n+1][2];
    	for(int i=1;i<=n;i++)
    		sequence[i] = Integer.parseInt(st.nextToken());
    	DP[1][0] = sequence[1];	//DP[1][0]을 sequence[1]로 초기화
    	if(n==1)		//입력된 수열 값이 1개일 때 그 값 그대로 출력
    		result = sequence[1];
    	else		//DP구성하는 함수 실행
    		result = cal();
    	bw.write(result + "\n");		//최대 길이 BufferedWriter 저장
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    }
    //반복문을 통해 규칙을 적용하여 DP 구성 및 최대 연속합 구하는 함수
    static int cal() {
    	int max = Integer.MIN_VALUE;	//최대값 초기화
    	for(int i=2;i<=n;i++) {
    		if(DP[i-1][0]>=0) 	//DP[i][0]의 규칙1.
    			DP[i][0] = DP[i-1][0] + sequence[i];
    		else		//DP[i][0]의 규칙2.
    			DP[i][0] = sequence[i];
    		
    		if(DP[i-1][1] + sequence[i] >= DP[i-1][0])	//DP[i][1]의 규칙1.
    			DP[i][1] = DP[i-1][1] + sequence[i];	
    		else		//DP[i][1]의 규칙2.
    			DP[i][1] = DP[i-1][0];
    		
    		max = Math.max(max, Math.max(DP[i][0], DP[i][1]));	//최대값 비교
    	}
    	return max;		//최대 연속합 반환
    }
}
