import java.io.*;
import java.util.*;
public class Main{
	public static int[] num;		//입력값 수 저장 배열
	public static int[] result;		//수열 저장 배열
	public static StringBuilder sb = new StringBuilder();		//결과
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //---------입력값 저장 및 배열 초기화----------
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	int N = Integer.parseInt(st.nextToken());
    	int M = Integer.parseInt(st.nextToken());
    	num = new int[N];
    	result = new int[M];
    	st = new StringTokenizer(br.readLine(), " ");
    	
    	for(int i=0;i<N;i++) {
    		num[i] = Integer.parseInt(st.nextToken());
    	}
    	
    	Arrays.sort(num);		//배열 오름차순 정렬
    	NandM(N, M, 0,0);		//함수 실행
    	bw.write(sb.toString() + "\n");		//결과 BufferedWriter 저장
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    }
    //------재귀를 통한 수열의 경우의 수 구하는 함수------
    public static void NandM(int N, int M, int depth, int curIndex) {
    	if(depth==M) {		//수열의 크기 만족할 때 수열 StringBuilder에 저장
    		for(int i=0;i<M;i++)
    			sb.append(result[i] + " ");
    		sb.append("\n");
    		return;
    	}
    	for(int i=curIndex;i<N;i++) {		//만족 안할 시 수열 값 추가
    		result[depth] = num[i];
    		NandM(N, M, depth+1, i+1);
    	}
    }
}
