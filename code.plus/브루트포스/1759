import java.io.*;
import java.util.*;
public class Main{
	public static char[] alphabet;		//암호에 들어갈 알파벳 배열
	public static char[] result;		//암호의 알파벳 값 배열
	public static boolean[] check;		//알파벳 사용되었는지 확인하는 배열
	public static int L,C;
	public static StringBuilder sb = new StringBuilder();	//결과
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //---------입력값 저장 및 배열 초기화----------
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	L = Integer.parseInt(st.nextToken());
    	C = Integer.parseInt(st.nextToken());
    	alphabet = new char[C];
    	result = new char[L];
    	check = new boolean[C];
    	st = new StringTokenizer(br.readLine()," ");
    	for(int i=0;i<C;i++) {
    		alphabet[i] = st.nextToken().charAt(0);
    	}
    	Arrays.sort(alphabet);		//알파벳 오름차순 정렬
    	code(0,0,0,0);		//함수 실행
    	bw.write(sb.toString() + "\n");		//결과 BufferedWriter 저장
    	bw.flush();			//결과 출력
    	bw.close();
    	br.close();
    }
    //------------조건에 맞는 암호 만드는 경우의 수 구하는 함수----------
    public static void code(int vowel, int consonant, int depth,int cur) {
    	if(depth==L) {		//암호가 완성되었을 때
    		if(vowel>0 && consonant>1) {	//조건에 맞았을 때
        		for(int i=0;i<L;i++) 	//암호 StringBuilder에 저장
        			sb.append(result[i] + "");
        		sb.append("\n");
    		}
    		return;
    	}
        //---------암호에 들어갈 알파벳 탐색--------
    	for(int i=cur;i<C;i++) {
    		if(!check[i]) {		//사용되지 않은 알파벳일 경우
    			check[i] = true;
    			char temp = alphabet[i];
    			result[depth] = temp;
                	//알파벳이 자음일 때
    			if(temp=='a' || temp =='e' || temp=='i' || temp=='o' || temp=='u')
    				code(vowel+1, consonant, depth+1, i+1);
    			else
                	//알파벳이 모음일 때
    				code(vowel,consonant+1,depth+1,i+1);
    			check[i] = false;
    		}
    	}
    	
    }
}
