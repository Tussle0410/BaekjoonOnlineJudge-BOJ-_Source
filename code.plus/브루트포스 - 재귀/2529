import java.io.*;
import java.util.*;
public class Main{
	public static int k;
	public static long max = Long.MIN_VALUE, min = Long.MAX_VALUE;	//최대,최소값
	public static String strMax,strMin;		//최대,최소값 문자열
	public static char[] inequality;		//부등호 저장 배열
	public static boolean[] check = new boolean[10];	//0~9 숫자 사용 확인 배열
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //--------입력값 저장 및 배열 초기화--------
    	k = Integer.parseInt(br.readLine());
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	inequality = new char[k];
    	for(int i=0;i<k;i++) {
    		inequality[i] = st.nextToken().charAt(0);
    	}
        //-------시작 값 0~9 함수 실행--------
    	for(int i=0;i<10;i++) {
    		check[i] = true;
    		inequalityCal(1, i+"");
    		check[i] = false;
    	}
    	bw.write(strMax + "\n" + strMin);		//최대값, 최소값 BufferedWriter 저장
    	bw.flush();			//결과 출력
    	bw.close();
    	br.close();
    	
    }
    //-------부등호에 만족하는 최대값,최소값 찾는 함수-----------
    public static void inequalityCal(int depth, String cur) {
    	if(depth==k+1) {
    		long temp = Long.parseLong(cur);
    		if(temp > max) {	//최대값 구하기
    			max = temp;
    			strMax = cur;
    		}
    		if(temp < min) {	//최소값 구하기
    			min = temp;
    			strMin = cur;
    		}
    		return;
    	}
    	for(int i=0;i<=9;i++) {
    		if(!check[i]) {	//숫자를 사용하지 않았을 경우
            	//부등호 조건에 만족하는지 확인
    			if((inequality[depth-1]=='<' 
                	&& Character.getNumericValue(cur.charAt(depth-1))<i) 
                	|| (inequality[depth-1]=='>' 
                    	&& Character.getNumericValue(cur.charAt(depth-1))>i))
                {
    				check[i] = true;
    				inequalityCal(depth+1, cur+i);
    				check[i] = false;
    			}
    		}
    	}
    	return;
    }
}
