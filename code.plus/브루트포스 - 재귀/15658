import java.io.*;
import java.util.*;

public class Main {
	static int N,min = Integer.MAX_VALUE,max = Integer.MIN_VALUE;
	static int[] num;	//수열의 값을 저장하는 배열
    public static void main(String[] args) throws IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
    	N = Integer.parseInt(br.readLine());
    	num = new int[N];
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
        //수열의 값 저장
    	for(int i=0;i<N;i++) 
    		num[i] = Integer.parseInt(st.nextToken());
    	st = new StringTokenizer(br.readLine()," ");
    	//연산자 개수 저장
    	int plus = Integer.parseInt(st.nextToken());
    	int minus = Integer.parseInt(st.nextToken());
    	int mul = Integer.parseInt(st.nextToken());
    	int div = Integer.parseInt(st.nextToken());
    	
    	cal(plus,minus,mul,div,1,num[0]);	//모든 경우의 결과 구하는 함수 실행
    	bw.write(max + "\n" + min);	//최대값과 최소값 BufferedWriter 저장
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    }
    //연산자 개수를 고려하여 모든 경우의 결과를 구하는 함수
    static void cal(int plus,int minus, int mul, int div,int length,int cur) {
    	if(length==N) {		//연산 완성시.
    		min = Math.min(min, cur);	//최대값 비교
    		max = Math.max(max, cur);	//최소값 비교
    		return;
    	}
    	if(plus!=0)	//덧셈 개수 남을 때
    		cal(plus-1,minus,mul,div,length+1, cur+num[length]);
    	if(minus!=0)	//뺄셈 개수 남을 때
    		cal(plus,minus-1,mul,div,length+1,cur-num[length]);
    	if(mul != 0)	//곱셈 개수 남을 때
    		cal(plus,minus,mul-1,div,length+1,cur*num[length]);
    	if(div != 0)	//나눗셈 개수 남을 때
    		cal(plus,minus,mul,div-1,length+1,cur/num[length]);
    }
}
