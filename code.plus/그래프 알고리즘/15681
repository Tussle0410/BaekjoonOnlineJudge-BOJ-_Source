import java.io.*;
import java.util.*;

public class Main{
	static int N,R,Q;
	static int[] DP;	//서브 트리 정점 수 저장 메모이제이션
	static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();	//트리 정보 저장 리스트
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		N = Integer.parseInt(st.nextToken());
		R = Integer.parseInt(st.nextToken());
		Q = Integer.parseInt(st.nextToken());
		DP = new int[N+1];
		for(int i=0;i<=N;i++) {
			graph.add(new ArrayList<>());
		}
        	//입력되는 트리 저장
		for(int i=0;i<N-1;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int U = Integer.parseInt(st.nextToken());
			int V = Integer.parseInt(st.nextToken());
			graph.get(U).add(V);
			graph.get(V).add(U);
		}
		search(R , 0);		//루트 노드 기준 재귀 탐색 진행
        	//Q개의 U에 대하여 DP값 BufferedWriter 저장
		for(int i=0;i<Q;i++) {
			int num = Integer.parseInt(br.readLine());
			bw.write(DP[num] + "\n");
		}
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//루트 노드를 시작으로 재귀를 통해 서브 트리의 정점의 수 DP에 저장하는 재귀 함수
	static int search(int root, int parent) {
		if(DP[root]!=0)		//이미 탐색한 정점일 때
			return DP[root];
		DP[root] = 1;	//자기 자신 정점 + 1
		for(int next : graph.get(root)) {
			if(next != parent) {		//부모 정점을 제외한 연결된 정점 탐색
				DP[root] += search(next,root);
			}
		}
		return DP[root];
	}
}
