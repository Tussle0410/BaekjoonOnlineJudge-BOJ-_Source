import java.io.*;
import java.util.*;
public class Main{
	static int N,M;
	static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();	//간선 정보 저장
	static boolean[] check;		//방문 확인 배열
	public static void main(String[] arg) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
        	//--------입력값 저장 및 리스트 초기화--------
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		check = new boolean[N+1];
		
		for(int i=0;i<=N;i++)
			graph.add(new ArrayList<>());		//리스트 초기화
		
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			graph.get(u).add(v);		//간선 값 저장
			graph.get(v).add(u);		//간선 값 저장
		}
		int count = 0;
		for(int i=1;i<=N;i++) {
			if(!check[i]) {		//정점 방문하지 않았을 때
				bfs(i);		//BFS 함수 실행
				count++;		//BFS 시작시 연결 요소 + 1
			}
		}
		bw.write(count + "\n");		//연결 요소 BufferedWriter 저장
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//BFS를 이용하여 정점과 간선을 탐색하는 함수
	static void bfs(int start) {
		Queue<Integer> queue = new LinkedList<>();
		queue.add(start);		//시작 정점 저장
		while(!queue.isEmpty()) {
			int temp = queue.poll();
			for(int value : graph.get(temp)) {
				if(!check[value]) {		//해당 정점 탐색하지 않았을 때
					queue.add(value);
					check[value] = true;
				}
			}
		}
		return;
	}
}
