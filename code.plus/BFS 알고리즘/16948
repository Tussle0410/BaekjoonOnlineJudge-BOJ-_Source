import java.util.*;
import java.io.*;

public class Main {
    static int N;
    static boolean[][] board;		//체스판 방문 확인 함수
    static int[] dx = {-2, -2, 0, 0, 2, 2};		//"다크 나이트" x값 변경값
    static int[] dy = {-1, 1, -2, 2, -1, 1};	//"다크 나이트" y값 변경값
    //"다크 나이트" 현재 위치 관련 생성자
    static class position{
        int x, y, count;
        public position(int x, int y, int count) {
            this.x = x;
            this.y = y;
            this.count = count;
        }
    }
    static public void  main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        N = Integer.parseInt(br.readLine());
        board = new boolean[N][N];
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        //시작 위치, 도착 위치 저장
        int r1 = Integer.parseInt(st.nextToken());
        int c1 = Integer.parseInt(st.nextToken());
        int r2 = Integer.parseInt(st.nextToken());
        int c2 = Integer.parseInt(st.nextToken());
        int result = bfs(r1,c1,r2,c2);		//BFS 탐색 시작
        bw.write(result + "\n");	//결과 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //BFS탐색으로 최소 이동 횟수 및 도착 불가능시 -1 반환하는 함수
    static int bfs(int r1, int c1, int r2, int c2){
        Queue<position> queue = new LinkedList<>();
        board[c1][r1] = true;
        queue.add(new position(r1, c1,0));
        while(!queue.isEmpty()){
            position cur = queue.poll();
            int x = cur.x;
            int y = cur.y;
            int count = cur.count;
            if(x==r2 && y==c2)		//도착 위치 도달시.
                return count;
            //현재 위치에서 "다크 나이트" 이동
            for(int i=0;i<6;i++){
                int tempX = x + dx[i];
                int tempY = y + dy[i];
                if(tempX>=0 && tempY>=0 && tempX<N && tempY<N && !board[tempY][tempX]){
                    board[tempY][tempX] = true;
                    queue.add(new position(tempX,tempY,count+1));
                }
            }
        }
        return -1;		//도달 못했을 때 -1을 반환
    }
}
