import java.util.*;
import java.io.*;

public class Main {
	//레이저 연결할 좌표 관련 클래스
    static class position{
        int x, y;
        public position(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    //BFS탐색에 PriorityQueue에 사용할 레이저 관련 클래스
    static class laser implements Comparable<laser>{
        int x, y, mirror, direction;
        public laser(int x, int y, int mirror, int direction) {
            this.x = x;
            this.y = y;
            this.direction = direction;
            this.mirror = mirror;
        }
        @Override
        public int compareTo( laser o) {
            return this.mirror - o.mirror;
        }
    }
    static int W,H;
    static char[][] map;		//지도 관련 저장 배열
    static ArrayList<position> C = new ArrayList<>();	//레이저 연결 위치 저장 리스트
    static int[] dx = {0, 0, -1, 1};	//상하좌우 x값 변경값
    static int[] dy = {-1, 1, 0, 0};	//상하좌우 y값 변경값
    static public void  main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        W = Integer.parseInt(st.nextToken());
        H = Integer.parseInt(st.nextToken());
        map = new char[H][W];
        //레이저 연결 위치 및 지도 정보 저장
        for(int i=0;i<H;i++){
            String str = br.readLine();
            for(int j=0;j<W;j++){
                map[i][j] = str.charAt(j);
                if(map[i][j]=='C'){
                    C.add(new position(j,i));
                }
            }
        }
        map[C.get(1).y][C.get(1).x] = '.';	//연결 위치 '.'으로 변경
        int result = bfs(C.get(0), C.get(1));	//BFS 탐색 시작
        bw.write(result + "\n");	//최소 거울 개수 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //다익스트라 알고리즘으로 BFS탐색을 진행하여 최소 거울 개수로 레이저 연결하는 함수
    static int bfs(position start, position end){
        PriorityQueue<laser> pq = new PriorityQueue<>();	//다익스트라에 사용될 우선순위 큐
        int[][] visited = new int[H][W];	//해당 지도에 연결된 최소 거울 개수
        for(int i=0;i<H;i++)	//거울 개수 나올 수 있는 최대값으로 설정
            Arrays.fill(visited[i],10001);
        pq.add(new laser(start.x, start.y, -1, -1));
        while(!pq.isEmpty()){
            laser cur = pq.poll();
            int x = cur.x;
            int y = cur.y;
            int mirror = cur.mirror;
            int direction = cur.direction;
            if(x==end.x && y==end.y)	//레이저 연결 완료!
                return mirror;
            for(int i=0;i<4;i++){
                int tempX = x + dx[i];
                int tempY = y + dy[i];
                if(tempX>=0 && tempY>=0 && tempX<W && tempY < H ){
                    if(map[tempY][tempX] == '.'){
                    	//거울을 설치한 경우
                        if(direction != i && visited[tempY][tempX] >= mirror+1){
                            pq.add(new laser(tempX,tempY,mirror+1, i));
                            visited[tempY][tempX] = mirror+1;
                        }
                        //기존 방향으로 레이저가 나아갈 경우
                        else if(direction==i && visited[tempY][tempX] >= mirror){
                            pq.add(new laser(tempX,tempY,mirror,i));
                            visited[tempY][tempX] = mirror;
                        }
                    }
                }
            }
        }
        return 0;		//연결 불가능시
    }
}
