import java.util.*;
import java.io.*;

public class Main {
    
    //bfs탐색에 원숭이 이동에 관한 클래스
    static class position{
        int x, y, knightMove, count;
        public position(int x, int y, int knightMove, int count) {
            this.x = x;
            this.y = y;
            this.knightMove = knightMove;
            this.count = count;
        }
    }
    static int K, H, W;
    static int[][] map;
    //원숭이 이동에 관한 x, y 변경값
    static int dx[] = {0, 0, -1, 1, -1, 1, -1, 1, -2, -2, 2, 2};
    static int dy[] = {-1, 1, 0, 0, -2, -2, 2, 2, -1, 1, -1, 1};
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        K = Integer.parseInt(br.readLine());
        st = new StringTokenizer(br.readLine()," ");
        W = Integer.parseInt(st.nextToken());
        H = Integer.parseInt(st.nextToken());
        map = new int[H][W];
        //동물원에 관한 정보 저장
        for(int i=0;i<H;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j<W;j++)
                map[i][j] = Integer.parseInt(st.nextToken());
        }
        bw.write(bfs(0, 0) + "");	//탐색하여 최소 이동횟수 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //원숭이가 목적지에 도착하는 BFS탐색으로 최소 이동횟수를 구하는 함수
    static int bfs(int x, int y){
        Queue<position> queue = new LinkedList<>();
        //방문 확인은 원숭이가 체스의 나이트처럼 이동한 횟수도 구분해서 확인해야 합니다.
        boolean[][][] visited = new boolean[H][W][K+1];
        visited[y][x][0] = true;	//처음 원숭이 위치 방문 확인
        queue.add(new position(x,y,0,0));
        while(!queue.isEmpty()){
            position cur = queue.poll();
            int curX = cur.x;
            int curY = cur.y;
            int knightMove = cur.knightMove;
            int count = cur.count;
            if(curX == W-1 && curY == H-1)	//원숭이 목적지 도착시
                return count;
            int size = setSize(knightMove);
            for(int i=0;i<size;i++){
                int tempX = curX + dx[i];
                int tempY = curY + dy[i];
                if(inMap(tempX,tempY)){
                    if(map[tempY][tempX]==0){
                        if(i<4){                        //상하좌우 이동시
                            if(!visited[tempY][tempX][knightMove]){
                                visited[tempY][tempX][knightMove] = true;
                                queue.add(new position(tempX,tempY, knightMove, count+1));
                            }
                        }else{                        //체스의 나이트처럼 이동시
                            if(!visited[tempY][tempX][knightMove+1]){
                                visited[tempY][tempX][knightMove+1] = true;
                                queue.add(new position(tempX,tempY,knightMove+1, count+1));
                            }
                        }
                    }
                }
            }
        }
        return -1;	//원숭이가 목적지 도착 불가능시.
    }
    //원숭이가 체스의 나이트처럼 이동한 횟수에 따른 변경값 크기 조정
    static int setSize(int knightMove){
        if(knightMove < K)
            return dx.length;
        return 4;
    }
    //동물원에 좌표가 벗어나는지 확인하는 함수
    static boolean inMap(int x, int y){
        if(x>=0 && y>=0 && x<W && y<H)
            return true;
        return false;
    }
}
