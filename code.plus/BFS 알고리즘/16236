import java.util.*;
import java.io.*;

public class Main {
	//현재 상어의 위치 및 소요 시간 관련 클래스
    static class position implements Comparable<position>{
        int x,y,count;
        public position(int x, int y, int count) {
            this.x = x;
            this.y = y;
            this.count = count;
        }
        //거리가 같을 때 위쪽, 왼쪽 기준 우선순위로 정렬
        @Override
        public int compareTo(position o) {
            if(this.count == o.count){		//거리가 같을 때
                if(this.y == o.y){		//위쪽 우선순위
                    return this.x - o.x;
                }else		//왼쪽 우선순위
                    return this.y - o.y;
            }else
                return this.count - o.count;
        }
    }
    static int N, result = 0;
    static int curX=0, curY=0, curSize=2, eatingCount = 0;
    static int[] dx = {0, 0, -1, 1};		//상하좌우 x값 변경값
    static int[] dy = {-1, 1, 0, 0};		//상하좌우 y값 변경값
    static int[][] box;		//공간 저장 배열
    static public void  main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());
        box = new int[N][N];
        //입력되는 공간 저장 및 현재 아기 상어 위치 저장
        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j<N;j++){
                box[i][j] = Integer.parseInt(st.nextToken());
                if(box[i][j] == 9){
                    curX = j;
                    curY = i;
                }
            }
        }
        box[curY][curX] = 0;		//현재 아기 상어 위치 0으로 변환
        while(true){		//아기 상어에 먹을 수 있는 물고기가 없을 때까지 BFS 탐색
            int temp = bfs();	//BFS 탐색 시작
            if(temp == -1)		//먹을 수 있는 물고기 존재 없을 때
                break;
            result += temp;		//소요시간 더하기
            if(eatingCount == curSize){		//먹은 횟수에 따라 사이즈 증가
                eatingCount = 0;
                curSize++;
            }
        }
        bw.write(result + "\n");	//총 소요시간 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //아기 상어 위치에서 물고기 탐색하는 BFS 함수
    static int bfs(){
    	//같은 거리일 때 우선순위로 정렬되도록 PriorityQueue 정의
        PriorityQueue<position> queue = new PriorityQueue<>();
        boolean[][] visited = new boolean[N][N];
        visited[curY][curX] = true;		//현재 아기 상어 위치 방문 확인
        queue.add(new position(curX,curY,0));		//아기 상어 위치 PriorityQueue 저장
        while(!queue.isEmpty()){
            position cur = queue.poll();
            int x = cur.x;
            int y = cur.y;
            int count = cur.count;
            if(box[y][x] != 0 && box[y][x] <curSize){	//먹을 수 있는 물고기 접근시
                box[y][x] = 0;	//물고기를 먹었기 때문에 공간을 0으로 변경
                //아기 상어 위치 변경
                curX = x;	
                curY = y;
                eatingCount++;		//먹은 횟수 증가
                return count;		//소요 시간 반환
            }
            //인접한 공간 탐색
            for(int i=0;i<4;i++){
                int tempX = x + dx[i];
                int tempY = y + dy[i];
                if(tempX>=0 && tempY>=0 && tempX<N && tempY<N && !visited[tempY][tempX]){
                    if(box[tempY][tempX]<=curSize){		//이동할 수 있는 공간일 때
                        visited[tempY][tempX] = true;
                        queue.add(new position(tempX, tempY, count+1));
                    }
                }
            }
        }
        return -1;		//먹을 수 있는 물고기 없을 때 -1 반환
    }
}

