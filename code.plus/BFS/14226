import java.io.*;
import java.util.*;
public class Main{
	//BFS에 큐가 사용할 생성자
	static class emoticon{
		int count, clipboard, point;	//시간, 클립보드, 이모티콘 개수
		public int getCount() {
			return count;
		}
		public int getClipboard() {
			return clipboard;
		}
		public int getPoint() {
			return point;
		}
		public emoticon(int count, int clipboard, int point) {
			this.count = count;
			this.clipboard = clipboard;
			this.point = point;
		}
	}
	static int S;
	static boolean[][] visited = new boolean[10001][1001];	//탐색 확인 배열
	public static void main(String[] arg) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값을 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값을 출력하는 BufferedWriter
		S = Integer.parseInt(br.readLine());		//입력값 S 저장
		int result = bfs();		//BFS함수 실행 및 최소 시간 저장
		bw.write(result + "\n");		//최소 시간 BufferedWriter 저장
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//BFS에서 연산1,2,3을 이용하여 최소 시간을 탐색하는 함수
	static int bfs() {
		Queue<emoticon> queue = new LinkedList<emoticon>();		//BFS에 사용할 큐
		queue.add(new emoticon(0, 0, 1));		//초기 화면 큐에 저장
		visited[1][0] = true;		//초기 화면 탐색 완료
		while(!queue.isEmpty()) {
			emoticon temp = queue.poll();
			int count = temp.getCount();
			int clipboard = temp.getClipboard();
			int point = temp.getPoint();
			if(point == S) 		//입력값 S 도달 완료시
				return count;
			
			if(clipboard != point && clipboard <2001)	//연산1.
				queue.add(new emoticon(count+1, point, point));
			
            		//연산2.
			if(clipboard < 1001 && !visited[point + clipboard][clipboard] ) {
				visited[point + clipboard][clipboard] = true;
				queue.add(new emoticon(count+1, clipboard, point + clipboard));
			}
            
            		//연산3.
			if(point>0 && clipboard<1001 && !visited[point-1][clipboard] ) {
				visited[point-1][clipboard] = true;
				queue.add(new emoticon(count+1, clipboard, point-1));
			}	
		}
		return 0;
	}
}
