import java.io.*;
import java.util.*;
public class Main{
	//다익스트라에 사용하는 우선순위 큐에 생성자
	static class move{
		int x,y, count;		//x좌표, y좌표, 벽을 부순 횟수
		public int getX() {
			return x;
		}
		public int getY() {
			return y;
		}

		public int getCount() {
			return count;
		}

		public move(int x,int y, int count) {
			this.x = x;
			this.y = y;
			this.count = count;
		}
	}
	static int N,M;
	static int[][] maze;		//미로값 저장 배열
	static int[] dx = {-1, 1 , 0, 0};	//상하좌우 x값 변경 배열
	static int[] dy = {0, 0, -1, 1};	//상하좌우 y값 변경 배열
	static boolean[][] visited;		//해당 미로 방문하였는지 확인하는 배열
	public static void main(String[] arg) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
        	//--------입력값 저장 및 배열초기화----------
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		maze = new int[M][N];
		visited = new boolean[M][N];
		for(int i=0;i<M;i++) {
			String value = br.readLine();
			for(int j=0;j<N;j++) {
				maze[i][j] = Character.getNumericValue(value.charAt(j));
			}
		}
		int result = bfs();		//다익스트라 알고리즘을 통해 벽을 부순 최소횟수 저장
		bw.write(result + "\n");	//벽을 부순 최소 횟수 BufferedWriter 저장
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//다익스트라 알고리즘을 통해 벽을 최소로 부수는 최단경로 구하는 함수
	static int bfs() {
    		//벽을 부순 횟수에 따라 우선순위를 주어지는 큐
		PriorityQueue<move> queue = new PriorityQueue<move>(new Comparator<move>() {
			@Override
			public int compare(move o1, move o2) {
				return o1.count-o2.count;
			}
		});
		queue.add(new move(0,0,0));		//출발 지점 저장
		visited[0][0] = true;		//출발지점 탐색 완료
		while(!queue.isEmpty()) {
			move temp = queue.poll();
			int x = temp.getX();
			int y = temp.getY();
			int count = temp.getCount();
			if(x==M-1 && y==N-1) {		//목표 지점 도달시
				return count;
			}
			for(int i=0;i<dx.length;i++) {
				int tempX = x + dx[i];		//상하좌우 이동시 x값
				int tempY = y + dy[i];		//상하좌우 이동시 y값
				if(tempX>=0 && tempY>=0 && tempX<M && tempY<N && !visited[tempX][tempY]) {
					visited[tempX][tempY] = true;
					if(maze[tempX][tempY]==1) 	//벽을 부수고 이동할 때
						queue.add(new move(tempX,tempY,count+1));				
					else		//벽을 부수지 않고 이동할 때
						queue.add(new move(tempX,tempY,count));
				}
			}
		}
		return 0;
	}
}
