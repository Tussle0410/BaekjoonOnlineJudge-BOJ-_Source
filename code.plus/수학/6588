import java.io.*;
import java.util.*;
public class Main{
	static List<Boolean> list = new ArrayList<Boolean>();	//소수 확인 리스트
	static int maxValue = 1000000;	///최대값
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        decimalCal();     	//함수 실행
        //---------입력값 저장 및 함수 실행-------------
        while(true) {
        	int num = Integer.parseInt(br.readLine());
        	if(num==0)
        		break;
        	int b = goldbach(num);		//함수 실행
        	int a = num - b;
        	if(b==-1) {	//두 소수로 만들수 없는 경우
        		bw.write("Goldbach's conjecture is wrong.\n");
        	}else {
            	//결과 BufferedWriter 저장
            	bw.write(num + " = " + a + " + " + b + "\n" );
        	}
        }
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //-------b-a중 가장 컸을 때 b의 값을 구하는 함수--------
    public static int goldbach(int num) {
    	for(int i=num;i>=num/2;i--) {
        //a,b가 소수이고 b가 가장 큰 소수일 때
    		if(list.get(i) && list.get(num-i))
    			return i;
    	}
    	return -1;
    }
    //----에라토스테네스의 체 함수--------
    public static void decimalCal() {
        list.add(false);	//0은 소수 X
        list.add(false);	//1은 소수 X
        for(int i=2;i<=maxValue;i++) 
        	list.add(true);		//리스트 최대값만큼 초기화
        //-----소수이면 false, 소수 아니면 true-------
        for(int i=2;i*i<=maxValue;i++) {
        	if(list.get(i)) {
        		for(int j=i*i;j<=maxValue;j+=i)
        			list.set(j, false);
        	}
        }
    }
}
