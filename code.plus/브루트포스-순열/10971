import java.io.*;
import java.util.*;
public class Main{
	public static int N;
	public static int[][] cost;		//도시 이동 비용 저장 배열
	public static int[] permutation;	//현재 순열 저장 배열
	public static boolean[] check;		//도시 방문 확인 배열
	public static int min = Integer.MAX_VALUE;
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //------입력값 저장 및 배열 초기화------
    	N = Integer.parseInt(br.readLine());
    	StringTokenizer st;
    	cost = new int[N][N];
    	check = new boolean[N];
    	permutation = new int[N];
    	for(int i=0;i<N;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		for(int j=0;j<N;j++) {
    			cost[i][j] = Integer.parseInt(st.nextToken());
    		}
    	}
        //-------첫 출발 도시 탐색-----
    	for(int i=0;i<N;i++) {
    		check[i] = true;
    		permutation[0] = i;
    		minCost(1, 0, i);	//함수 실행
    		check[i] = false;
    	}
    	bw.write(min + "\n");	//최소 비용 BufferedWriter 저장
    	bw.flush();			//결과 출력
    	bw.close();
    	br.close();
    	
    }
    //--------모든 이동 경우 최소 비용 구하는 함수--------
    public static void minCost(int length,int cur, int start) {
    	if(length==N) {
        	//마지막 도시에서 첫 번째 도시 이동하는 비용
    		int temp = cost[permutation[length-1]][start];	
    		if(temp!=0)
    			min = Math.min(min, cur + temp);	//최소값 구하기
    		return;
    	}
      	//방문할 도시 탐색
    	for(int i=0;i<N;i++) {
    		if(!check[i]) {
    			check[i] = true;
    			permutation[length] = i;
    			if(cost[permutation[length-1]][permutation[length]]!=0)	//이동할 수 있으면
    				minCost(length+1, 
                    		cur+cost[permutation[length-1]][permutation[length]],start);
    			check[i] = false;
    		}
    	}
    	return;
    }
}
