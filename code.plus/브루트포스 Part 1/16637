import java.io.*;
import java.util.ArrayList;

public class Main {
    static int N, answer = Integer.MIN_VALUE;
    static ArrayList<Integer> num = new ArrayList<>();	//수식 숫자 저장 리스트
    static ArrayList<Character> operation = new ArrayList<>();	//수식 연산자 저장 리스트
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        String str = br.readLine();
        //수식 정보 저장
        for(int i=0;i<N;i++){
            if(i%2==0)
                num.add(Character.getNumericValue(str.charAt(i)));
            else
                operation.add(str.charAt(i));
        }
        dfs(num.get(0), 0);	//괄호 놓는 모든 경우 탐색 및 최대값 구하기
        bw.write(answer + "");	//최대값 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //수식에 괄호를 놓는 모든 경우 탐색하는 함수
    static void dfs(int value, int index){
        //수식 완성시!
        if(index == operation.size()){
            answer = Math.max(answer, value);
            return;
        }
        //괄호 놓지 않기
        int temp = cal(value, operation.get(index), num.get(index+1));
        dfs(temp, index+1);
        
        //괄호 놓기
        if(index+1 < operation.size()){
            temp = cal(value, operation.get(index), cal(num.get(index+1), operation.get(index+1), num.get(index+2)));
            dfs(temp, index+2);
        }
    }
    //연산자에 따른 값 계산 함수
    static int cal(int n1, char operation, int n2){
        if(operation == '+')
            return n1 + n2;
        else if(operation == '-')
            return n1 - n2;
        else
            return n1 * n2;
    }
}
