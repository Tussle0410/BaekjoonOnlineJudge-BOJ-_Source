import java.io.*;
import java.util.*;

public class Main {
    //위치 관련 정보 클래스
    static class info{
        int x, y, count;
        String value;
        public info(int x, int y, String value, int count) {
            this.x = x;
            this.y = y;
            this.value = value;
            this.count = count;
        }
    }
    static int[][] map = new int[5][5];	//공간 관련 정보 저장 배열
    static int dx[] = {0, 0, -1, 1};		//상하좌우 x변경값
    static int dy[] = {-1, 1, 0, 0};		//상하좌우 y변경값
    static HashSet<String> hash = new HashSet<>();	//숫자 탐색 확인 HashSet
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        //입력값 저장
        for(int i=0;i<5;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j<5;j++)
                map[i][j] = Integer.parseInt(st.nextToken());
        }
        //각 위치에서 BFS탐색으로 만들 수 있는 숫자의 모든 경우의 수 탐색
        for(int i=0;i<5;i++){
            for(int j=0;j<5;j++)
                bfs(i, j);
        }
        bw.write(hash.size() + "");	//숫자의 개수 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //BFS탐색으로 5번 이동하여 만들 수 있는 숫자 탐색
    static void bfs(int x, int y){
        Queue<info> q = new LinkedList<>();
        q.add(new info(x, y, String.valueOf(map[y][x]), 1));
        while(!q.isEmpty()){
            info cur = q.poll();
            if(cur.count==6){		//5번 이동 후 숫자 완성시
                if(!hash.contains(cur.value))	//첫 탐색으로 만난 숫자일 경우
                    hash.add(cur.value);
                continue;
            }
            //상하좌우 탐색중...
            for(int i=0;i<4;i++){
                int tempX = cur.x + dx[i];
                int tempY = cur.y + dy[i];
                if(inMap(tempX,tempY))
                    q.add(new info(tempX,tempY, cur.value + map[tempY][tempX], cur.count+1));
            }
        }
    }
    //이동할 위치가 공간에 존재하는지 확인하는 함수
    static boolean inMap(int x, int y){
        if(x>=0 && y>=0 && x<5 && y<5)
            return true;
        return false;
    }
}
