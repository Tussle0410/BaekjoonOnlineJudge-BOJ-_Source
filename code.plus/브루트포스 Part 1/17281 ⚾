import java.io.*;
import java.util.*;

public class Main {
    static int N, answer = 0;
    static int[][] player;	//각 이닝 선수들 타격 정보 저장 배열
    static boolean[] position;	//1,2,3루에 선수들 정보 저장 배열
    static boolean[] visited = new boolean[10];	//타선 배치시 선수 확인 배열
    static int[] select = new int[10];		//타선 정보
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        N = Integer.parseInt(br.readLine());
        player = new int[N+1][10];
        StringTokenizer st;
        //입력되는 이닝 정보들 저장
        for(int i=1;i<=N;i++){
            st = new StringTokenizer(br.readLine(), " ");
            for(int j=1;j<=9;j++)
                player[i][j] = Integer.parseInt(st.nextToken());
        }
        select[4] = 1;	//1번 선수 4번타자 임명!
        search(1);	//모든 타순 탐색
        bw.write(answer + "");	//최대 득점 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //1번 선수 제외한 모든 타선의 경우 탐색하는 함수
    static void search(int depth){
        if(depth==10){
            play();		//야구 게임 진행!
            return;
        }
        if(depth==4){		//4번 타자는 선택되었기 때문에 넘어갑니다.
            search(depth+1);
            return;
        }
        //선수들 탐색
        for(int i=2;i<=9;i++){
            if(visited[i])
                continue;
            visited[i] = true;
            select[depth] = i;
            search(depth+1);
            visited[i] = false;
        }
    }
    //야구게임 진행하는 함수
    static void play(){
        int inning = 1;		//이닝
        int curPlayer = 1;		//현재 타석의 선수 번호
        int score = 0;		//점수
        while(inning<=N){
            int outCount = 0;	//아웃 카운트
            position = new boolean[3];
            while(outCount<3){
                if(player[inning][select[curPlayer]]==0)	//0:아웃일 때
                    outCount++;
                else	//아웃을 제외한 타격일 때
                    score += playerMove(player[inning][select[curPlayer]]);

                //다음 선수로 변경
                if(curPlayer==9)
                    curPlayer=1;
                else
                    curPlayer++;
            }
            inning++;		//다음 이닝으로 변경
        }
        answer = Math.max(score, answer);
    }
    //타격에 따른 선수들 이동
    static int playerMove(int check){
        int score = 0;
        if(check==1){	//1 : 안타
            if(position[2])
                score++;
            position[2] = position[1];
            position[1] = position[0];
            position[0] = true;
        }else if(check==2){	//2 : 2루타
            for(int i=2;i>0;i--)
                if(position[i]){
                    score++;
                    position[i] = false;
                }
            position[2] = position[0];
            position[1] = true;
            position[0] = false;
        }else if(check==3){	//3 : 3루타
            for(int i=2;i>=0;i--)
                if(position[i]){
                    score++;
                    position[i] = false;
                }
            position[2] = true;
        }else{	//4 : 홈런
            for(int i=0;i<3;i++){
                if(position[i]){
                    score++;
                    position[i] = false;
                }
            }
            score++;
        }
        return score;
    }
}
