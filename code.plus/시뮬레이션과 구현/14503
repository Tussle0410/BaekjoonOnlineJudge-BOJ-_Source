import java.util.*;
import java.io.*;
public class Main{
	static int N,M,r,c,d;
	static int[][] space;
	static int[] dx = {-1, 0, 1, 0};	//북동남서 x값 변경
	static int[] dy = {0, 1, 0, -1};	//북동남서 y값 변경
	static boolean[][] visited;		//지도 구역 방문 확인 배열
	static int result=1;		//청소한 구역 개수 저장 변수
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	N =Integer.parseInt(st.nextToken());
    	M =Integer.parseInt(st.nextToken());
    	space = new int[N][M];
    	visited = new boolean[N][M];
        //청소기 초기 위치 및 방향 저장
    	st = new StringTokenizer(br.readLine()," ");
    	r = Integer.parseInt(st.nextToken());
    	c = Integer.parseInt(st.nextToken());
    	d = Integer.parseInt(st.nextToken());
        //지도 관련 정보 배열에 저장
    	for(int i=0;i<N;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		for(int j=0;j<M;j++)
    			space[i][j] = Integer.parseInt(st.nextToken());
    	}
    	visited[r][c] = true;		//초기 위치 청소 완료 확인
    	cal(r,c,d,0);		//로봇 청소기 탐색함수 실행
    	bw.write(result + "\n");	//로봇 청소기 청소한 구역 개수 BufferedWriter 저장
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    	
    }
    //로봇 청소기 작동하여 탐색하는 재귀 함수
    static void cal(int r, int c,int direction, int check){
    	if(check==4){		//왼쪽 방향으로 4번 회전시
    		int tempDirection = (direction+2)%4;	//후진 방향
    		int tempR = r + dx[tempDirection];
    		int tempC = c + dy[tempDirection];
    		if(space[tempR][tempC]==1)	//후진 시 벽이면 작동 종료
    			return;
    		else		//벽이 아니면 후진 진행
    			cal(tempR,tempC,direction,0);
    	}else {
        	//왼쪽 방향 이동
        	int tempDirection = direction-1<0?3:direction-1;
        	int tempR = r + dx[tempDirection];
        	int tempC = c + dy[tempDirection];
            	//청소하지 않은 구역일 때
        	if(space[tempR][tempC]==0 && !visited[tempR][tempC]) {
            	visited[tempR][tempC] = true;
        		result++;
        		cal(tempR,tempC, tempDirection, 0);		//전진
        	}else {		//벽이거나 청소한 구역일 때
        		cal(r,c,tempDirection, check+1);	//방향 전환
        	}
        	return;
    	}
    }
}
