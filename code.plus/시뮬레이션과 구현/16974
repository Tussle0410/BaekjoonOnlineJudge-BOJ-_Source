import java.io.*;
import java.util.StringTokenizer;

public class Main {
    static long[] h, p;	//레벨-N의 햄버거 재료 개수 및 패티의 개수 저장 배열
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        int N = Integer.parseInt(st.nextToken());
        long X = Long.parseLong(st.nextToken());
        h = new long[N+1];
        p = new long[N+1];
        h[0] = p[0] = 1;	//레벨 - 0 햄버거 초기화
        //레벨 1~N까지 햄버거 재료 개수 및 패티 개수 구하기
        for(int i=1;i<=N;i++){
            h[i] = h[i-1] * 2 + 3;
            p[i] = p[i-1] * 2 + 1;
        }
        long answer = cal(N,X);	//시뮬레이션 진행
        bw.write(answer + "");	//먹은 패티의 개수 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //시뮬레이션 진행하는 재귀 함수
    static long cal(int level, long count){
        if (level==0){		//레벨 - 0의 햄버거 도달 시
            if(count==0)	//먹을 양이 남지 않은 경우
                return 0;
            else		//먹을 양 1이 남은 경우
                return 1;
        }
        if(count==0)		//먹을 양을 다먹은 경우
            return 0;
        else if(h[level-1] + 2 == count)	//햄버거 먹는 경우 2.
            return p[level-1] + 1;
        else if(h[level-1] + 2 > count)		//햄버거 먹는 경우 3.
            return cal(level-1, count -1);
        else if(h[level-1] + 2 < count)		//햄버거 먹는 경우 1
            return p[level-1] + 1 + cal(level-1, count - h[level-1] - 2);
        else		//햄버거 먹는 경우 4.
            return p[level];
    }
}
