import java.util.*;
import java.io.*;
public class Main {
	static int N,result = 0;
	static int[][] map = new int[101][101];		//격자 방문 관련 배열
	static int[] dx = {0,-1,0,1};	//방향 번호에 따른 row값 변경값
	static int[] dy = {1,0,-1,0};	//방향 번호에 따른 col값 변경값
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
        	//N번 드래곤 커브 진행
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			int d = Integer.parseInt(st.nextToken());
			int g = Integer.parseInt(st.nextToken());
			dragonCurve(y, x, d, g);
		}
        	//격자에 드래곤 커브 진행한 지점으로 정사각형의 개수 구하기
		for(int i=0;i<100;i++) {
			for(int j=0;j<100;j++) {
            			//정사각형이면 +1
				if(map[i][j]==1 && map[i][j+1]==1 && map[i+1][j]==1 && map[i+1][j+1]==1) {
					result++;
				}
			}
		}
		bw.write(result + "\n");	//정사각형 개수 BufferedWriter 저장
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//드래곤 커브를 진행하는 함수
	static void dragonCurve(int row, int col, int direction, int generation) {
		ArrayList<Integer> list = new ArrayList<>();	//방향 저장하는 리스트
		map[row][col] = 1;
		list.add(direction);
        	//0~K세대 방향 저장
		for(int i=1;i<=generation;i++) {
			int size = list.size();
			for(int j=size-1;j>=0;j--) {
				int tempDirection = list.get(j)+1>3?0:list.get(j)+1;
				list.add(tempDirection);
			}
		}
        	//방향만큼 출발점에서 이동하여 방문한 지점 확인
		for(Integer value : list) {
			row += dx[value];
			col += dy[value];
			map[row][col] = 1;
		}
		return;
	}

}
