import java.io.*;
import java.util.*;

public class Main {
    //번호, 반복횟수 관련 클래스
    static class num implements Comparable<num>{
        int n, count;
        public num(int n, int count) {
            this.n = n;
            this.count = count;
        }
        //반복횟수 오름차순, 같을 때에는 번호 오름차순 Comparable
        @Override
        public int compareTo(num o) {
            if(this.count == o.count)
                return this.n - o.n;
            else
                return this.count - o.count;
        }
    }
    static int r,c,k;
    static int[][] arr = new int[101][101];	//배열에 대한 정보 저장
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        r = Integer.parseInt(st.nextToken())-1;
        c = Integer.parseInt(st.nextToken())-1;
        k = Integer.parseInt(st.nextToken());
        //배열에 대한 정보 저장
        for(int i=0;i<3;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0;j<3;j++)
                arr[i][j] = Integer.parseInt(st.nextToken());
        }
        bw.write(cal() + "");	//지나간 초를 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //시뮬레이션 진행하는 함수
    static int cal(){
        int time = 0;	//초
        int row = 3, col = 3;	//행의 개수, 열의 개수 저장 변수
        HashMap<Integer, Integer> map = new HashMap<>();	//숫자 중복횟수 HashMap
        ArrayList<num> list = new ArrayList<>();	//정렬하기 위한 리스트
        while(true){
            if(arr[r][c] == k )	//arr[r][c]가 k가 될 때
                break;
            if(time>100){	//100초가 벗어날 때
                time = -1;
                break;
            }
            int[][] temp = new int[101][101];
            if(row>=col){		//R연산
                for(int i=0;i<row;i++){
                    for(int j=0;j<col;j++)
                        if(arr[i][j]!=0)
                            map.put(arr[i][j], map.getOrDefault(arr[i][j],0)+1);
                    if(map.isEmpty())	//해당 행의 숫자 없는 경우
                        continue;
                    for(Integer key : map.keySet())	//숫자 반복횟수 리스트에 저장
                        list.add(new num(key, map.get(key)));
                    Collections.sort(list);		//정렬
                    col = Math.max(col, list.size()*2);	//변경된 행 사이즈 변경
                    int index = 0;
                    for(num n : list){
                        temp[i][index++] = n.n;
                        temp[i][index++] = n.count;
                    }
                    map.clear();
                    list.clear();
                }
            }else{		//C연산
                for(int i=0;i<col;i++){
                    for(int j=0;j<row;j++)
                        if(arr[j][i]!=0)
                            map.put(arr[j][i], map.getOrDefault(arr[j][i], 0)+1);
                    if(map.isEmpty())	//해당 행의 숫자 없는 경우
                        continue;
                    for(Integer key : map.keySet())	//숫자 반복횟수 리스트에 저장
                        list.add(new num(key, map.get(key)));
                    Collections.sort(list);	//정렬
                    row = Math.max(row,list.size()*2);	//변경된 열 사이즈 변경
                    int index = 0;
                    for(num n : list){
                        temp[index++][i] = n.n;
                        temp[index++][i] = n.count;
                    }
                    map.clear();
                    list.clear();
                }
            }
            arr = temp;
            time++;
        }
        return time;
    }
}
