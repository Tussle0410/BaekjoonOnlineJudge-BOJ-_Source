import java.io.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    //나라의 위치를 표현하는 클래스
    static class position{
        int x, y;
        public position(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    static int N,L,R, sum, count;
    static int[][] ground;	//인구수 저장 배열
    static int[][] groundIndex;	//나라 그룹 번호 저장 배열
    static int[] dx = {0, 0, -1, 1};	//상하좌우 x 변경값
    static int[] dy = {-1, 1, 0, 0};	//상하좌우 y 변경값
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        N = Integer.parseInt(st.nextToken());
        L = Integer.parseInt(st.nextToken());
        R = Integer.parseInt(st.nextToken());
        ground = new int[N][N];
        //입력되는 인구수 정보 저장
        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j<N;j++)
                ground[i][j] = Integer.parseInt(st.nextToken());
        }
        int days = 0;
        //시뮬레이션 시작!
        while(true){
            int index = 1;
            boolean moveCheck = false;	//인구 이동 일어났는지 확인 변수
            groundIndex = new int[N][N];
            //BFS탐색으로 그룹 분류 및 인구 이동 진행
            for(int i=0;i<N;i++){
                for(int j=0;j<N;j++){
                    if(groundIndex[i][j]==0){
                        groundSearch(j, i, index++);
                        if(count!=1)	//인구 이동 발생 시
                            moveCheck = true;
                    }
                }
            }
            if(!moveCheck)	//인구 이동 일어나지 않았을 때 종료
                break;
            days++;	//일 수 증가
        }
        bw.write(days + "");	//인구 이동한 일 수 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //BFS탐색으로 그룹을 나눈 뒤 인구 이동을 진행하는 함수
    static void groundSearch(int sx, int sy, int index){
        Queue<position> queue = new LinkedList<>();
        queue.add(new position(sx ,sy));
        groundIndex[sy][sx] = index;
        ArrayList<position> group = new ArrayList<>();	//그룹 위치 저장 리스트
        count = 0;		//그룹의 개수
        sum = ground[sy][sx];	//그룹 인구의 합
        while(!queue.isEmpty()){
            position cur = queue.poll();
            count++;
            group.add(new position(cur.x, cur.y));
            for(int i=0;i<4;i++){
                int tempX = cur.x + dx[i];
                int tempY = cur.y + dy[i];
                //인접한 나라들 탐색
                if(inGround(tempX,tempY) && groundIndex[tempY][tempX]==0){
                    int temp = Math.abs(ground[cur.y][cur.x] - ground[tempY][tempX]);
                    if(temp >=L && temp<=R){
                        groundIndex[tempY][tempX] = index;
                        sum += ground[tempY][tempX];
                        queue.add(new position(tempX,tempY));
                    }
                }
            }
        }
        int num = sum / count;		//그룹에 속한 나라들 변경할 인구수 구하기
        for(int i=0;i<group.size();i++)	//인구 이동으로 인구수 변경
            ground[group.get(i).y][group.get(i).x] = num;

    }
    //이동한 공간이 땅에 존재하는 곳인지 확인하는 함수
    static boolean inGround(int x, int y){
        if(x>=0 && y>=0 && x<N && y<N)
            return true;
        return false;
    }
}

