import java.io.*;
import java.util.*;

public class Main {
    //나무 관련 정보 클래스
    static class tree implements Comparable<tree>{
        int x, y, value;
        public tree(int x, int y, int value) {
            this.x = x;
            this.y = y;
            this.value = value;
        }
        //정렬할 때 사용할 Comprable
        @Override
        public int compareTo(tree o) {
            return this.value - o.value;
        }
    }
    static int N,M,K;
    static int[] dx = {-1, 0, 1, -1, 1, -1, 0, 1};	//인접한 칸 x변경값
    static int[] dy = {-1, -1, -1, 0, 0, 1, 1, 1};	//인접한 칸 y변경값
    static int[][] garden, nourishment;	//양분 정보, 양분 추가 정보 저장 배열
    static ArrayList<tree> deadTrees = new ArrayList<>();
    static Queue<tree> trees = new LinkedList<>();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        garden = new int[N][N];
        nourishment = new int[N][N];
        //입력되는 추가 양분에 대한 정보를 저장
        for(int i=0;i<N;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j<N;j++){
                nourishment[i][j] = Integer.parseInt(st.nextToken());
                garden[i][j] = 5;
            }
        }
        //나무의 정보 저장
        for(int i=0;i<M;i++){
            st = new StringTokenizer(br.readLine(), " ");
            int tempY = Integer.parseInt(st.nextToken())-1;
            int tempX = Integer.parseInt(st.nextToken())-1;
            int tempValue = Integer.parseInt(st.nextToken());
            trees.add(new tree(tempX,tempY,tempValue));
        }
        Collections.sort((List<tree>) trees);	//나무 나이 기준 오름차순 정렬
        
        //K년도 진행
        for(int i=0;i<K;i++){
            spring();
            summer();
            fall();
            winter();

            if(trees.size()==0)	//더 이상 나무가 존재하지 않을 때
                break;
        }
        bw.write(trees.size() + "");
        bw.flush();
        bw.close();
        br.close();
    }
    //봄
    static void spring(){
        int size = trees.size();
        //영양분 흡수중!
        for(int i=0;i<size;i++){
            tree temp = trees.poll();
            if(garden[temp.y][temp.x] - temp.value >= 0){
                garden[temp.y][temp.x] -= temp.value;
                trees.add(new tree(temp.x, temp.y, temp.value+1));
            }else
                deadTrees.add(temp);	//죽은 나무 추가
        }
    }
    //여름
    static void summer(){
        //죽은 나무의 대한 양분들 흡수중!
        for(int i=0;i<deadTrees.size();i++){
            tree temp = deadTrees.get(i);
            garden[temp.y][temp.x] += temp.value/2;
        }
        deadTrees.clear();
    }
    //가을
    static void fall(){
        //5의 배수인 나무들 기준 인접한 칸 번식중!
        Queue<tree> newTrees = new LinkedList<>();
        for(tree cur : trees){
            for(int i=0;i<8;i++){
                int tempX = cur.x + dx[i];
                int tempY = cur.y + dy[i];
                if(cur.value % 5 == 0 && inGarden(tempX, tempY))
                    newTrees.add(new tree(tempX,tempY,1));
            }
        }
        newTrees.addAll(trees);
        trees = newTrees;
    }
    //겨울
    static void winter(){
        //미리 입력된 양분 추가중!
        for(int i=0;i<N;i++){
            for(int j=0;j<N;j++)
                garden[i][j] += nourishment[i][j];
        }
    }
    //인접한 칸 이동시 범위 안에 존재하는지 확인하는 함수
    static boolean inGarden(int x, int y){
        if(x>=0 && y>=0 && x<N && y<N)
            return true;
        return false;
    }
}
