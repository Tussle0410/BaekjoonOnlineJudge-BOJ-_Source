import java.io.*;
import java.util.*;
public class Main{
	static int[][] arr;	//입력되는 배열 저장
	static int N,M,R;
	public static void main(String[] arg) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
        	//---------입력값 저장 및 배열 초기화-------
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		R = Integer.parseInt(st.nextToken());
		arr = new int[N][M];
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j=0;j<M;j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		st = new StringTokenizer(br.readLine()," ");
		for(int i=0;i<R;i++) {
			String command = st.nextToken();
			if(command.equals("1"))		//연산1.
				upsideDown();
			else if(command.equals("2"))	//연산2.
				reverseLeftAndRight();
			else if(command.equals("3")) 	//연산3.
				rightRotations();
			else if(command.equals("4"))	//연산4.
				leftRotations();
			else if(command.equals("5"))	//연산5
				subarray_five();
			else		//연산 6
				subarray_six();
		}
        	//배열 결과 BufferedWriter 저장
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				bw.write(arr[i][j] + " ");
			}
			bw.newLine();
		}
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//1번 연산 상하반전 수행
	static void upsideDown() {
		for(int i=0;i<N/2;i++) {
			for(int j=0;j<M;j++) {
				int temp = arr[N-1-i][j];
				arr[N-1-i][j] = arr[i][j];
				arr[i][j] = temp;
			}
		}
		return;
	}
   
    	//2번 연산 좌우 반전 수행
	static void reverseLeftAndRight() {
		for(int i=0;i<M/2;i++) {
			for(int j=0;j<N;j++) {
				int temp = arr[j][M-1-i];
				arr[j][M-1-i] = arr[j][i];
				arr[j][i] = temp;
			}
		}
		return;
	}
    	//3번 연산 오른쪽 90도 이동
	static void rightRotations() {
		change();
		int[][] result = new int[N][M];;
		rightRotationsChange(result, N, M);
		arr = new int[N][M];
		arr = result;
		return;
	}
    	//4번 연산 왼쪽 90도 이동
	static void leftRotations() {
		change();
		int[][] result = new int[N][M];
		leftRotationsChange(result, N, M);
		arr = new int[N][M];
		arr = result;
		return;
	}
    	//3번 연산에 값 변경하는 함수
	static void rightRotationsChange(int[][] temp, int row, int col) {
		for(int i=0;i<col;i++) {
			for(int j=0;j<row;j++) {
				temp[j][col-1-i] = arr[i][j];
			}
		}
		return;
	}
    	//4번 연산에 값 변경하는 함수
	static void leftRotationsChange(int[][] temp, int row, int col) {
		for(int i=0;i<col;i++) {
			for(int j=0;j<row;j++) {
				temp[row-1-j][i] = arr[i][j];
			}
		}
		return;
	}
    	//5번 연산 사분면 이동 수행
	static void subarray_five() {
		int[][] result = new int[N][M];
		subarrayChange(result, 0, 0, 0, M/2);
		subarrayChange(result, 0, M/2, N/2, M/2);
		subarrayChange(result, N/2, M/2, N/2, 0);
		subarrayChange(result, N/2, 0, 0, 0);
		arr = result;
		return;
	}
    	//6번 연산 사분면 이동 수행
	static void subarray_six() {
		int[][] result = new int[N][M];
		subarrayChange(result, 0, 0, N/2, 0);
		subarrayChange(result, N/2, 0, N/2, M/2);
		subarrayChange(result, N/2, M/2, 0, M/2);
		subarrayChange(result, 0, M/2, 0, 0);
		arr = result;
		return;
	}
    	//5,6번 사분면 배열 변경하는 함수
	static void subarrayChange(int[][] temp, int x1, int y1, int x2, int y2) {
		for(int i=0;i<N/2;i++) {
			for(int j=0;j<M/2;j++) {
				temp[x2+i][y2+j] = arr[x1+i][y1+j];
			}
		}
		return;
	}
    	//N,M을 변경하는 함수
	static void change() {
		int temp = N;
		N = M;
		M = temp;
		return;
	}
}
