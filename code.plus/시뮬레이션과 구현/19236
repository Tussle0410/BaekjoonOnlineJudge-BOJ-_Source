import java.io.*;
import java.util.HashMap;
import java.util.StringTokenizer;

public class Main {
    //물고기 정보 클래스
    static class info{
        int x, y, d;
        boolean dead;
        public info(int x, int y, int d, boolean dead) {
            this.x = x;
            this.y = y;
            this.d = d;
            this.dead = dead;
        }
    }
    static int[] dx = {0, 0, -1, -1, -1, 0, 1, 1, 1};	//물고기 방향에 따른 x변경값
    static int[] dy = {0, -1, -1, 0, 1, 1, 1, 0, -1};	//물고기 방향에 따른 y변경값
    static int[][] space = new int[4][4];	//공간에 물고기나 상어 위치 저장
    static info[] fish = new info[17];	//물고기 정보 저장 리스트
    static int point = 0;		//물고기 먹은 번호 합의 최대값
    public static void main(String[] args) throws IOException {
        //입력값 처리하는 BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //결과값 출력하는 BufferedWriter
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        //물고기 정보 저장
        for(int i=0;i<4;i++){
            st = new StringTokenizer(br.readLine()," ");
            for(int j=0;j<4;j++){
                int n = Integer.parseInt(st.nextToken());
                space[i][j] = n;
                fish[n] =  new info(j, i, Integer.parseInt(st.nextToken()), false);
            }
        }
        init();	//상어 진입
        start(0, 0, fish[point].d, point);	//백트래킹으로 시뮬레이션 진행
        bw.write(point + "");	//최대합 BufferedWriter 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //백트래킹으로 모든 경우를 시뮬레이션 진행하는 함수
    static void start(int x, int y, int d, int value){
        point = Math.max(point, value);		//현재 먹은 물고기 합 비교
        //원 상태로 되돌리기 위해 현재 공간과 물고기 정보 복사
        int[][] tempSpace = new int[4][4];
        info[] tempFish = new info[17];
        //공간 복사
        for(int i=0;i<4;i++)
            System.arraycopy(space[i], 0, tempSpace[i], 0, 4);
        //물고기 정보 복사
        for(int i=1;i<=16;i++)
            tempFish[i] = new info(fish[i].x,fish[i].y, fish[i].d, fish[i].dead);

        fishMove();		//물고기 이동 진행
        //상어 이동할 수 있는 경우 모두 진행
        for(int i=1;i<=4;i++){
            int tempX = x + dx[d]*i;
            int tempY = y + dy[d]*i;
            if(!inSpace(tempX,tempY))
                break;

            if(space[tempY][tempX]==0)
                continue;

            int tempD = fish[space[tempY][tempX]].d;
            int tempS = space[tempY][tempX];

            fish[tempS].dead = true;	//해당 물고기 죽었다고 표현
            space[y][x] = 0;
            space[tempY][tempX] = 17;

            //다음 경우 진행
            start(tempX, tempY, tempD, value + tempS);

            space[tempY][tempX] = tempS;
            space[y][x] = 17;
            fish[tempS].dead = false;	//해당 물고기 복구
        }
        //공간 원상태로 복구
        for(int i=0;i<4;i++)
            System.arraycopy(tempSpace[i], 0, space[i], 0, 4);
        //물고기 정보 복구
        for(int i=1;i<=16;i++)
            fish[i] = new info(tempFish[i].x,tempFish[i].y, tempFish[i].d, tempFish[i].dead);
    }
    //물고기 이동 진행하는 함수
    static void fishMove(){
        for(int i=1;i<17;i++){
            if(fish[i].dead)	//죽은 물고기는 넘기기
                continue;
            info cur = fish[i];
            for(int j=0;j<7;j++){
                int tempX = cur.x + dx[cur.d];
                int tempY = cur.y + dy[cur.d];
                if(inSpace(tempX,tempY) && space[tempY][tempX]!=17){
                    if(space[tempY][tempX]!=0){	//이동하려는 칸에 물고기 존재시
                        info temp = fish[space[tempY][tempX]];
                        temp.x = cur.x;
                        temp.y = cur.y;
                    }
                    space[cur.y][cur.x] = space[tempY][tempX];
                    space[tempY][tempX] = i;
                    cur.x = tempX;
                    cur.y = tempY;
                    break;
                }else	//이동하려는 칸이 상어나 경계일 경우 방향 변경
                    cur.d = cur.d+1==9?1:cur.d+1;
            }
        }
    }
    //물고기 이동시 공간에 존재하는 확인하는 함수
    static boolean inSpace(int x, int y){
        if(x>=0 && y>=0 && x<4 && y<4)
            return true;
        return false;
    }
    //상어 진입을 진행하는 함수
    static void init(){
        point += space[0][0];
        fish[space[0][0]].dead = true;
        space[0][0] = 17;
    }
}
