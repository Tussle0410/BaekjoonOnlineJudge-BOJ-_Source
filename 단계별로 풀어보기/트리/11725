import java.io.*;
import java.util.*;

public class Main {
	static int N;
	static ArrayList<ArrayList<Integer>> tree = new ArrayList<>();	//트리의 값 저장
	static boolean[] visited;	//트리 정점 방문 확인
	static int[] result;	//각 정점 부모 정점 확인
    public static void main(String[] args) throws IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
    	StringTokenizer st;
    	N = Integer.parseInt(br.readLine());
    	result = new int[N+1];
    	visited = new boolean[N+1];
        //트리 값 저장
    	for(int i=0;i<=N;i++) 
    		tree.add(new ArrayList<Integer>());
    		
    	for(int i=1;i<N;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		int point1 = Integer.parseInt(st.nextToken());
    		int point2 = Integer.parseInt(st.nextToken());
    		tree.get(point1).add(point2);
    		tree.get(point2).add(point1);
    	}
    	bfs(1);		//루트 정점 1에서부터 BFS 탐색 시작
        //2~N의 정점의 부모 노드의 값을 BufferedWriter 저장
    	for(int i=2;i<=N;i++)
    		bw.write(result[i] + "\n");
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    }
    //BFS 탐색을 수행하는 함수
    static void bfs(int start) {
    	Queue<Integer> queue = new LinkedList<Integer>();
    	visited[start] = true;	//시작 정점 방문 확인
    	queue.add(start);	
    	while(!queue.isEmpty()) {
    		int root = queue.poll();
    		for(Integer next : tree.get(root)) {	//해당 정점 탐색
    			if(!visited[next]) {
    				visited[next] = true;
    				result[next] = root;
    				queue.add(next);
    			}
    		}
    	}
    	return;
    }
}
