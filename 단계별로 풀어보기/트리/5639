import java.io.*;
import java.util.*;
public class Main {
	//트리에 관한 클래스
	static class tree{
		int root;
		tree left, right;
		public tree(int root) {
			this.root = root;
		}
		
	}
	static StringBuilder sb = new StringBuilder();
    public static void main(String[] args) throws IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
    	tree root = new tree(Integer.parseInt(br.readLine()));
        //전위 순회 값을 이용하여 트리의 구조 만들기
    	while(true) {
    		String input = br.readLine();
    		if(input == null || input.equals("")) 
    			break;
    		treeInsert(root,Integer.parseInt(input));
    	}
    	postOrder(root);	//후위 순회 진행
    	bw.write(sb.toString());	//후위 순회 결과 BufferedWriter 저장
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    }
    //후위 순회 진행
    static void postOrder(tree cur) {
    	if(cur.left!=null)	//왼쪽 자식 노드
    		postOrder(cur.left);
    	if(cur.right!=null)	//오른쪽 자식노드
    		postOrder(cur.right);
    	sb.append(cur.root + "\n");	//루트 노드
    }
    //트리의 구조 만들기
    static void treeInsert(tree root, int num) {
    	if(root.root>num) {
    		if(root.left==null)	//왼쪽 자식 노드로 이동
    			root.left = new tree(num);
    		else
    			treeInsert(root.left,num);	//왼쪽 자식노드로 설정
    	}else {
    		if(root.right==null)	//오른쪽 자식 노드로 이동
    			root.right = new tree(num);
    		else		//오른쪽 자식 노드로 설정
    			treeInsert(root.right,num);
    	}
    }
}
