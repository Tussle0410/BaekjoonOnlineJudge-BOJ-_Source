import java.io.*;
import java.util.*;
public class Main{
	static int N,W;
	static int[][] accident;	//사건의 좌표 저장 배열
	static int[][] DP;		//각 경찰차 위치에 따른 최소 거리의 합 저장하는 배열
	public static void main(String[] arg) throws IOException{
		BufferedReader br  = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
        	//-----입력값 저장 및 배열 초기화-------
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		W = Integer.parseInt(br.readLine());
		DP = new int[W+1][W+1];
		accident = new int[W+1][2];
		for(int i=1;i<=W;i++) {
			st = new StringTokenizer(br.readLine()," ");
			accident[i][0] = Integer.parseInt(st.nextToken());
			accident[i][1] = Integer.parseInt(st.nextToken());
		}
		int result = cal(0,0,1);		//경찰차 거리의 최소 합 구하기
		bw.write(result + "\n");	//거리의 최소합 BufferedWriter 저장
		//사건 어떤 경찰차가 도착했는지 확인
		int one = 0;
		int two = 0;
		for(int i=1;i<=W;i++) {
			int width = distance(one,i,true);	//첫번째 경찰차 위치 구하기
			if(DP[one][two]-width == DP[i][two]) {	//DP 이용하여 첫번째 경찰차가 갔는지 확인
				bw.write("1\n");
				one = i;
			}
			else {	//첫 번째 경찰차가 가지 않았을 때
				bw.write("2\n");
				two = i;
			}
		}
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//------재귀와 DP를 이용하여 경찰차 거리의 최소합을 구하는 함수------
	static int cal(int first, int second, int next) {
		if(next==W+1) 	//마지막 사건 이후
			return 0;
		
		if(DP[first][second]!=0)		//이미 연산했었던 값인 경우
			return DP[first][second];
		//첫번째 경찰차가 다음 사건 갈 경우
		int first_move_next = cal(next,second,next+1) + distance(first,next,true);
        	//두번째 경찰차가 다음 사건 갈 경우
		int second_move_next = cal(first,next,next+1) + distance(second,next,false);
		//두 경우 비교하여 거리의 최소 합 구하기
		DP[first][second] = Math.min(first_move_next, second_move_next);
		
		return DP[first][second];
	}
    	//각 좌표별 거리 구하기
	static int distance(int cur, int next, boolean check) {
		int cur_x = accident[cur][0];
		int cur_y = accident[cur][1];
		int next_x = accident[next][0];
		int next_y = accident[next][1];
		if(cur==0) {
			if(check)
				cur_x = cur_y = 1;
			else
				cur_x = cur_y = N;
		}
		return Math.abs(cur_x - next_x) + Math.abs(cur_y - next_y);
	}
}
