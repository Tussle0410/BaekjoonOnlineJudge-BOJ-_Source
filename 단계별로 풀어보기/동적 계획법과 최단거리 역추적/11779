import java.util.*;
import java.io.*;

public class Main {
	//graph에 저장하는 노드 생성자
	static class node{
		int point, cost;	//다음 위치, 버스 비용

		public node(int point, int cost) {
			this.point = point;
			this.cost = cost;
		}
		public int getPoint() {
			return point;
		}

		public int getCost() {
			return cost;
		}
	}
	static int n,m;
	static ArrayList<ArrayList<node>> graph = new ArrayList<>();	//그래프 저장 리스트
	static int[] dist,process;		//최단 비용 저장 배열, 이전 도시 번호 저장 배열
    public static void main(String[] args) throws Exception {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //-------입력값 저장 및 리스트 초기화--------
    	StringTokenizer st;
    	n = Integer.parseInt(br.readLine());
    	m = Integer.parseInt(br.readLine());
    	dist = new int[n+1];
    	process = new int[n+1];
    	for(int i=0;i<=n;i++)
    		graph.add(new ArrayList<>());
    	//그래프 값들 리스트에 저장
    	for(int i=0;i<m;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		int s = Integer.parseInt(st.nextToken());
    		int e = Integer.parseInt(st.nextToken());
    		int cost = Integer.parseInt(st.nextToken());
    		graph.get(s).add(new node(e,cost));
    	}
    	st = new StringTokenizer(br.readLine()," ");
    	int start = Integer.parseInt(st.nextToken());
    	int end = Integer.parseInt(st.nextToken());
    	
    	cal(start,end);		//최단 비용의 경로 구하는 함수 실행
    	bw.write(dist[end] + "\n");		//최단 비용 BufferedWriter 저장
    	
    	Stack<Integer> stack = new Stack<Integer>();	//경로를 출력하기 위한 스택 선언
    	int count = 1;		//방문한 도시 개수
    	stack.push(end);	//도착 위치 Stack에 저장
        //경로 BufferedWriter 저장
    	while(process[end]!=0) {
    		stack.push(process[end]);
    		end = process[end];
    		count++;
    	}
    	bw.write(count + "\n");		//방문한 도시 개수 BufferedWriter 저장
    	while(!stack.isEmpty()) {
    		bw.write(stack.pop() + " ");	//경로 BufferedWriter 저장
    	}
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    }
    //BFS를 이용한 다익스트라 알고리즘, 최단 비용 경로 구하는 함수
    static void cal(int s, int e) {
    	//비용에 따른 우선순위 큐
    	PriorityQueue<node> queue = new PriorityQueue<node>(new Comparator<node>() {
			@Override
			public int compare(node o1, node o2) {
				return o1.getCost()-o2.getCost();
			}
		});
    	queue.add(new node(s,0));	//출발 도시 큐에 저장
    	Arrays.fill(dist, Integer.MAX_VALUE);	//비용 배열 초기화
    	dist[s] = 0;		//출발 도시 비용 초기화
    	boolean[] visited = new boolean[n+1];	//도시 방문 여부 확인 배열 초기화
    	while(!queue.isEmpty()) {
    		node temp = queue.poll();
    		int point = temp.getPoint();
    		int cost = temp.getCost();
    		if(point == e) 		//목적지 도시 도착시
    			return;
    		
    		if(visited[point])		//이미 방문한 도시일 때
    			continue;
    		
    		visited[point] = true;
    		//해당 도시에서 버스로 갈 수 있는 도시에서 비용이 적은 도시 큐에 저장
    		for(node next : graph.get(point)) {
    			if(!visited[next.getPoint()] && cost + next.getCost() < dist[next.getPoint()]) {
    				dist[next.getPoint()] = cost + next.getCost();
    				queue.add(new node(next.getPoint(),dist[next.getPoint()]));
    				process[next.getPoint()] = point;
    			}
    		}
    	}
    	return;
    }
}
