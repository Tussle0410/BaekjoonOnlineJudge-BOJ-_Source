import java.io.*;
import java.util.*;
public class Main{
	static Deque<Integer> deque = new ArrayDeque<>();	//문제에 사용할 덱
	static StringBuilder sb = new StringBuilder();	//결과 저장할 StringBuilder
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//입력 값을 받는 BufferedReader
        	//--------입력값 저장 및 if문을 통한 함수 실행-------
		int index = Integer.parseInt(br.readLine());
		StringTokenizer st;
		for(int i=0;i<index;i++) {
			st = new StringTokenizer(br.readLine()," ");
			String text = st.nextToken();
			if(text.equals("push_front")) {
				int n = Integer.parseInt(st.nextToken());
				push_front(n);
			}else if(text.equals("push_back")) {
				int n = Integer.parseInt(st.nextToken());
				push_back(n);
			}else if(text.equals("pop_front"))
				pop_front();
			else if(text.equals("pop_back"))
				pop_back();
			else if(text.equals("size"))
				size();
			else if(text.equals("empty"))
				empty();
			else if(text.equals("front"))
				front();
			else if(text.equals("back"))
				back();
		}
		System.out.println(sb.toString());	//결과 출력
		br.close();
	}
    	//------push_front 함수----------
	public static void push_front(int n) {
		deque.addFirst(n);
	}
    	//------push_back 함수----------
	public static void push_back(int n) {
		deque.addLast(n);
	}
    	//------pop_front 함수----------
	public static void pop_front() {
		if(deque.isEmpty()) {
			sb.append("-1\n");
			return;
		}
		sb.append(deque.pollFirst() + "\n");
	}
    	//------pop_back 함수----------
	public static void pop_back() {
		if(deque.isEmpty()) {
			sb.append("-1\n");
			return;
		}
		sb.append(deque.pollLast() + "\n");
	}
    	//------size 함수----------
	public static void size() {
		sb.append(deque.size() + "\n");
	}
    	//------empty 함수----------
	public static void empty() {
		if(deque.isEmpty())
			sb.append("1\n");
		else
			sb.append("0\n");
	}
    	//------front 함수----------
	public static void front() {
		if(deque.isEmpty()) {
			sb.append("-1\n");
			return;
		}
		sb.append(deque.peekFirst() + "\n");
	}
    	//------back 함수----------
	public static void back() {
		if(deque.isEmpty()) {
			sb.append("-1\n");
			return;
		}
		sb.append(deque.peekLast() + "\n");
	}
}

