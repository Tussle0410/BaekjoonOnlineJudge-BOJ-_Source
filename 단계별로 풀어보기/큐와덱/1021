import java.io.*;
import java.util.*;
public class Main{
	static Deque<Integer> deque = new ArrayDeque<>();	//주 데크
	static Deque<Integer> temp = new ArrayDeque<>();	//임시 데크
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //출력값 처리하는 BufferedWriter
        //---------입력값 저장 및 주 데크 초기화---------
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int result = 0;
        for(int i=1;i<=N;i++)
        	deque.offer(i);
        
        st = new StringTokenizer(br.readLine(), " ");
        //---------함수 실행------------
        for(int i=0;i<M;i++) {
        	int findNum = Integer.parseInt(st.nextToken());
        	int leftNum = leftpoll(findNum);
        	int rightNum = rightpoll(findNum);
        	result += poll(leftNum,rightNum);
        }
        bw.write(result + "\n");	//결과 BufferedWriter에 저장
        bw.flush();		//결과 출력
        bw.close();
        br.close();
    }
    //----------최소값을 이용한 데크 결과 뽑기--------
    public static int poll(int left, int right) {
    	if(left<=right) {	//left가 작을 경우
    		for(int i=0;i<left;i++) {
    			deque.offerLast(deque.pollFirst());
    		}
    		deque.pollFirst();
    		return left;
    	}else {			//right가 작을 경우
    		for(int i=0;i<right;i++) {
    			deque.offerFirst(deque.pollLast());
    		}
    		deque.pollFirst();	//데크 뽑아내기
    		return right;	//연산 횟수 반환
    	}
    }
    //-----------left로 검색시 연산 횟수 찾는 함수-----------
    public static int leftpoll(int findNum) {
    	int result = 0;
    	int size = deque.size();
    	for(int i=0;i<size;i++) {
    		int n = deque.pollFirst();
    		temp.offerFirst(n);
    		if(n==findNum)
    			break;
    		result++;
    	}
    	for(int i=0;i<result+1;i++) {
    		int n = temp.pollFirst();
    		deque.offerFirst(n);
    	}
    	return result;
    }
    //-----------right로 검색시 연산 횟수 찾는 함수-----------
    public static int rightpoll(int findNum) {
    	int result = 1;
    	int size = deque.size();
    	for(int i=0;i<size;i++) {
    		int n = deque.pollLast();
    		temp.offerFirst(n);
    		if(n==findNum)
    			break;
    		result++;
    	}
    	for(int i=0;i<result;i++) {
    		int n = temp.pollFirst();
    		deque.offerLast(n);
    	}
    	return result;
    }
}
