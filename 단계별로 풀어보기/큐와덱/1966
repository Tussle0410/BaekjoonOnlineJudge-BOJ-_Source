import java.io.*;
import java.util.*;
public class Main{
	static Queue<Integer> queue = new LinkedList<>();	//순서 저장 큐
	static StringBuilder sb = new StringBuilder();	//결과 저장 StringBuilder
	static int[] arr;		//중요도 저장 배열
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//입력 값을 받는 BufferedReader
        //---------입력값 저장 및 큐와 함수 초기화----------
		int index = Integer.parseInt(br.readLine());
		StringTokenizer st;
		for(int i=0;i<index;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
			arr = new int[N];
			st = new StringTokenizer(br.readLine());
            		//큐, 배열 저장
			for(int j=0;j<N;j++) {
				arr[j] = Integer.parseInt(st.nextToken());
				queue.offer(j);
			}
            
			printQueue(N,M);	//함수 실행
			queue.clear();	//큐 초기화
		}
		System.out.println(sb.toString());
		br.close();
	}
    	//---------프린터 큐 순서 구하는 함수---------
	public static void printQueue(int N, int M) {
		int result = 1;	 //결과값
		int check = N;	//몇 번째 반복인지 확인
		for(int i=0;i<N;i++) {
			int index=0;
			int temp = queue.poll();
			int max = arr[temp];
			queue.offer(temp);
            		//중요도 최대값 찾기
			for(int j=1;j<check;j++) {
				temp = queue.poll();
				queue.offer(temp);
				if(arr[temp]>max) {
					index=j;
					max = arr[temp];
				}
			}
           		//최대값 앞 만큼 poll, offer 진행
			for(int j=0;j<index;j++) {
				temp = queue.poll();
				queue.offer(temp);
			}
			temp = queue.poll();	//큐에 나오는 값
            		//나온 값과 순서를 찾는 값이 같은 경우
			if(temp==M) {
				sb.append(result + "\n");
				break;
			}
			check--;
			result++;
		}
	}
}
