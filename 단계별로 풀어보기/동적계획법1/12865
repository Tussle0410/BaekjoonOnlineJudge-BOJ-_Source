
import java.io.*;
import java.util.*;
public class Main{
	static int[][] check;	//메모이제이션 배열
	static int[][] weight;	//무게 및 가치 저장 배열
	static int index;		// 물건 개수
	static int maxWeight;	// 무게 최대치
	public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //BufferedReader를 통해 입력 값 받기
        //---------입력값 저장 및 배열 초기화------------
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	index = Integer.parseInt(st.nextToken());
    	maxWeight = Integer.parseInt(st.nextToken());
    	check = new int[index+1][maxWeight+1];
    	weight = new int[index+1][2];
    	for(int i=1;i<=index;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		weight[i][0] = Integer.parseInt(st.nextToken());
    		weight[i][1] = Integer.parseInt(st.nextToken());
    	}
        //--------------함수 실행-----------
    	for(int i=1;i<=maxWeight;i++)
    		for(int j=1;j<=index;j++)
    			bag(i,j);
    	
    	System.out.println(check[index][maxWeight]);	//결과 출력
    	br.close();
	}
    //--------배낭에 넣을 수 있는 최대 가치 구하는 함수--------------
	public static void bag(int w, int i) {
		if(check[i][w]==0) {
			if(weight[i][0]>w)	//최대무게보다 클 경우
				check[i][w] = check[i-1][w];	//같은 열의 (행-1)의 값
			else		//그 이외에 경우
				check[i][w] = Math.max(check[i-1][w], 
                check[i-1][w-weight[i][0]] + weight[i][1]);
                //Math.max(해당 물건 들어가지 않았을 때 가치 최대값, 해당 물건 들어갔을 때 가치 최대값)
		}
	}
}
