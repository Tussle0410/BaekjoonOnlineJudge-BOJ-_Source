//색깔 인덱스 표시 : 빨간색 = 0, 초록색 = 1, 파란색 = 2
import java.io.*;
import java.util.*;
public class Main{
	static long[][] check;		//메모이제이션 배열
	static int [][] num;		//비용 값 저장 배열
	static long min=Integer.MAX_VALUE;	//최소값
	static int index;	//건물의 개수
	public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //BufferedReader를 통해 입력 값 받기
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //BufferedWriter를 통해 결과 값 출력
        //---------------배열 초기화 및 입력값 받기-----------
    	index = Integer.parseInt(br.readLine());
    	num = new int[index][3];
    	check = new long[index][3];
    	StringTokenizer st;
    	for(int i=0;i<index;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		num[i][0] = Integer.parseInt(st.nextToken());
    		num[i][1] = Integer.parseInt(st.nextToken());
    		num[i][2] = Integer.parseInt(st.nextToken());
    	}
        //-------------------함수 실행 및 최소값 구하기-----------------
    	min = Math.min(RGBstreet(0, 0),Math.min(RGBstreet(0, 1), RGBstreet(0, 2)));
    	bw.write(min + "\n");	//최소값 BufferedWriter에 저장
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
	}
    //-------------RGB건물 색칠 비용 구하는 함수----------------
	public static long RGBstreet(int n,int color) {
		if(n==index-1) 		//색칠 마지막 건물일 때
			return num[n][color];
		if(check[n][color]!=0)	//메모이제이션에 있는 값일 때
			return check[n][color];
		if(color==0)	//빨간색일때
			check[n][color] =  Math.min(RGBstreet(n+1, 1), RGBstreet(n+1, 2)) + num[n][color];
		else if(color==1)	//초록색일때
			check[n][color] =  Math.min(RGBstreet(n+1, 0), RGBstreet(n+1, 2)) + num[n][color];
		else		//파란색일때
			check[n][color] =  Math.min(RGBstreet(n+1, 0), RGBstreet(n+1, 1)) + num[n][color];
		return check[n][color];
		}
	}
