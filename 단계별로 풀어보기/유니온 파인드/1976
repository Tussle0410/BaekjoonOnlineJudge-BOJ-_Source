import java.io.*;
import java.util.*;
public class Main {
	static int N,M;
	static int[] node;	//도시의 루트 노드 저장하는 배열
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
		StringTokenizer st;
		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());
		node = new int[N+1];
        	//1~n번의 도시 루트 노드 초기화
		for(int i=1;i<=N;i++)
			node[i] = i;
            	//입력되는 도시 방문
		for(int i=1;i<=N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j=1;j<=N;j++) {
				int temp = Integer.parseInt(st.nextToken());
				if(temp==1)	//합집합 
					union(i,j);
			}
		}
        	//방문 계획에 맞게 이동 가능한지 확인
		st = new StringTokenizer(br.readLine()," ");
		int a = Integer.parseInt(st.nextToken());
		for(int i=1;i<M;i++) {
			int b = Integer.parseInt(st.nextToken());
			if(!isCheck(a, b)) {	//이동 불가능
				bw.write("NO");
				break;
			}
			if(i==M-1)		//이동 가능
				bw.write("YES");
		}
		bw.flush();	//결과 출력
		bw.close();
		br.close();
	}
    	//루트 노드 찾는 함수
	static int find(int n) {
		if(n==node[n])
			return n;
		return node[n] = find(node[n]);
	}
    	//루트 노드를 비교하여 작은 값을 기준으로 변경하는 함수
	static void union(int a, int b) {
		int x = find(a);
		int y = find(b);
		if(x!=y) {
			if(x>y)
				node[x] = y;
			else
				node[y] = x;
		}
		return;
	}
    	//a,b에 대해서 루트노드가 동일한지 확인하는 함수
	static boolean isCheck(int a, int b) {
		int x = find(a);
		int y = find(b);
		if(x!=y)
			return false;
		else
			return true;
	}
}
