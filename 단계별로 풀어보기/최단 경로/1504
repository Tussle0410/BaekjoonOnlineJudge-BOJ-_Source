import java.io.*;
import java.util.*;
public class Main{
	//목적지와 가중치를 저장하는 생성자
	public static class node{
		int point, cost;

		public node(int point, int cost) {
			this.point = point;
			this.cost = cost;
		}
		public int getPoint() {
			return point;
		}
		public int getCost() {
			return cost;
		}
	}
	public static int N,E;
	public static int[] distance;		//최단 거리 저장하는 배열
	public static ArrayList<ArrayList<node>> graph = new ArrayList<>();	//그래프 배열
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //---------입력값 저장 및 리스트 초기화--------
    	StringTokenizer st = new StringTokenizer(br.readLine());
    	N = Integer.parseInt(st.nextToken());
    	E = Integer.parseInt(st.nextToken());
    	
    	for(int i=0;i<N+1;i++) 	//리스트 초기화
    		graph.add(new ArrayList<>());
    	//그래프 값 저장
    	for(int i=0;i<E;i++) {
    		st = new StringTokenizer(br.readLine());
    		int a = Integer.parseInt(st.nextToken());
    		int b = Integer.parseInt(st.nextToken());
    		int c = Integer.parseInt(st.nextToken());
    		//양방향으로 a -> b, b -> a 모두 저장
    		graph.get(a).add(new node(b,c));
    		graph.get(b).add(new node(a,c));
    	}
    	//필수로 지나는 정점 저장
    	st = new StringTokenizer(br.readLine()," ");
    	int v1 = Integer.parseInt(st.nextToken());
    	int v2 = Integer.parseInt(st.nextToken());
    
    	distance = new int[N+1];
    	
        //1 -> v1 -> v2 -> N 최단 경로 구하기
    	long result = shortestPath(1, v1);
    	result += shortestPath(v1, v2);
    	result += shortestPath(v2, N);
    	//1 -> v2 -> v1 -> N 최단 경로 구하기
    	long temp = shortestPath(1, v2);
    	temp += shortestPath(v2, v1);
    	temp += shortestPath(v1, N);
    	
    	result = Math.min(result, temp);	//두 경우중 작은 값 결과로 저장
    	if(result >= Integer.MAX_VALUE)
    		bw.write("-1\n");	//두 경우 둘다 목적지 도착 못할 경우
    	else
    		bw.write(result + "\n");		//도착했으며 더 작은 최단 경로
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    	
    }
    //--------BFS와 다익스트라를 이용한 최단 경로 구하는 함수--------
    public static int shortestPath(int start, int end) {
    	Arrays.fill(distance, Integer.MAX_VALUE);
    	distance[start] = 0;		//시작 정점 거리 0으로 초기화
         /*
        우선순위 큐를 사용해서 현재 정점들에서 거리가 가장 적은 정점을
        바로 poll()을 할 수 있도록 거리가 작은 순으로 Queue에 저장되도록
        Comparator를 설정해주었습니다.
        */
    	PriorityQueue<node> queue = new PriorityQueue<node>(new Comparator<node>() {
			@Override
			public int compare(node o1, node o2) {
				return o1.cost-o2.cost;
			}
		});
    	queue.add(new node(start,0));
    	while(!queue.isEmpty()) {
    		node temp = queue.poll();
    		int point = temp.getPoint();
    		int cost = temp.getCost();
            /*
            정점에 도착했을 때 최소 거리보다 크면
            해당 정점에 간선 어디를 가도 최소 거리가 되지 않기 때문에
            해당 탐색을 그대로 넘어갔습니다.
            */
    		if(distance[point] < cost)
    			continue;
    		for(node value : graph.get(point)) {
            		//더 작은 경로 찾을 때
        		if(distance[value.getPoint()] > value.getCost() + cost) {
        			distance[value.getPoint()] = value.getCost() + cost;
        			queue.add(new node(value.getPoint(),value.getCost() + cost));
        		}
    		}
    	}
    	return distance[end];	//목적지 최단경로 반환
    }
}

