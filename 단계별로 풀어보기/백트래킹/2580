import java.io.*;
import java.util.*;
public class Main{
	static int[][] sudoku = new int[9][9];	//스도쿠 판 배열
	static StringBuilder sb = new StringBuilder();	//결과 출력 StringBuilder
	public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //BufferedReader를 통해 입력 값 받기
    	StringTokenizer st;
        //스도쿠 값 배열에 저장
    	for(int i=0;i<9;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		for(int j=0;j<9;j++) {
    			sudoku[i][j] = Integer.parseInt(st.nextToken());
    		}
    	}
        //스도쿠 문제 풀이 함수 실행
    	sudokuSolution(0,0);
    	br.close();
	}
    //--------------------스도쿠 문제 풀이 함수------------------
	public static void sudokuSolution(int x, int y) {
		if(y==9){		//행 바꿀때
			sudokuSolution(x+1, 0);
			return;
		}
        //-----------행이 9이면 모든 스도쿠 숫자 삽입 완료!-------------
        //-----------완료 되었으니 StringBuilder를 통해 결과 출력-------
		if(x==9) {		
	    	for(int i=0;i<9;i++) {
	    		for(int j=0;j<9;j++) {
	    			sb.append(sudoku[i][j] + " ");
	    		}
	    		sb.append("\n");
	    	}
	    	System.out.print(sb);
	    	System.exit(0);
		}
        //--------------백 트래킹을 통해 스도쿠 숫자 찾기-----------
		if(sudoku[x][y]==0) {
			for(int i=1;i<=9;i++) {
				if(numCheck(x,y,i)) {
					sudoku[x][y]=i;
					sudokuSolution(x, y+1);
				}
			}
            //------안되는 경우의 수일 경우 이전 노드에서 초기화-------
			sudoku[x][y]=0;
			return;
		}
		sudokuSolution(x, y+1);
	}
    //-------------스도쿠 숫자 들어갈 수 있는지 확인 함수 ----------
	public static boolean numCheck(int x,int y, int num) {
		if(rowCheck(x,num))
			return false;
		else if(colCheck(y,num))
			return false;
		else if(blockCheck(x, y,num))
			return false;
		else
			return true;
	}
    //------------가로줄 체크------------
	public static boolean rowCheck(int x,int num) {
		for(int i=0;i<9;i++) {
			if(sudoku[x][i]==num)
				return true;
		}
		return false;
	}
    //-----------세로줄 체크--------------
	public static boolean colCheck(int y,int num) {
		for(int i=0;i<9;i++) {
			if(sudoku[i][y]==num)
					return true;
		}
		return false;
	}
    //-----------3x3 블럭 체크--------------
	public static boolean blockCheck(int x, int y, int num) {
		int start_x = (x/3)*3, end_x = start_x+3;
		int start_y = (y/3)*3, end_y = start_y+3;
		for(int i=start_x;i<end_x;i++) {
			for(int j=start_y;j<end_y;j++) {
				if(sudoku[i][j]==num)
					return true;
			}
		}
		return false;
	}
}
