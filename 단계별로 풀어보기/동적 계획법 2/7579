import java.io.*;
import java.util.*;
public class Main{
	public static int[][] app;	//앱 메모리, 비용 저장 배열
	public static int[][] DP;	//만들 수 있는 비용마다 확보 가능한 최대 메모리 크기 저장 배열
	public static int N,M;
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //-------입력값 저장 및 배열 초기화----------
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	N = Integer.parseInt(st.nextToken());
    	M = Integer.parseInt(st.nextToken());
    	app = new int[N+1][2];
    	DP = new int[N+1][10001];
    	for(int i=0;i<=1;i++) {
    		st = new StringTokenizer(br.readLine(), " ");
    		for(int j=1;j<=N;j++)
    		app[j][i] = Integer.parseInt(st.nextToken());
    	}
    	appTermination();		//함수 실행
    	for(int i=1;i<10001;i++) {	
        /*
        DP[N][1~10000]에서 M보다 크거나 작은 값을 찾으며
        가장 먼저 만나는 배열의 i값이 최소 값*/
    		if(DP[N][i]>=M) {
    			bw.write(i + "\n");		//최소값 결과 저장
    			break;
    		}
    	}
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();

    }
    //---------DP[][]의 값 구하는 함수----------
    public static void appTermination() {
    	for(int i=1;i<=N;i++) {
    		for(int j=1;j<10001;j++) {
        		if(j==app[i][1])	//조건 1.
        			DP[i][j] = Math.max(DP[i-1][j], app[i][0]);
        		else if(j>app[i][1]) {	//조건 2.
                    if(DP[i-1][j-app[i][1]]==0)
                        DP[i][j] = DP[i-1][j];
                    else
        			    DP[i][j] = Math.max(DP[i-1][j], app[i][0] + DP[i-1][j-app[i][1]]);
        		}else		//조건 3.
        			DP[i][j] = DP[i-1][j];
    		}
    	}
    	return;
    }
}
