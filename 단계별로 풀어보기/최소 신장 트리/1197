import java.io.*;
import java.util.*;

public class Main{
	//선분에 대한 정보 생성자
	static class node{
		int point1, point2;
		long value;
		public node(int point1,int point2, long value) {
			super();
			this.point1 = point1;
			this.point2 = point2;
			this.value = value;
		}
	}
	static int V,E;
	static int[] root;	//루트 노드 정보 저장 배열
	static long result = 0; 
	static node[] graph;	//입력되는 선분의 값 저장 배열
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		V = Integer.parseInt(st.nextToken());
		E = Integer.parseInt(st.nextToken());
		graph = new node[E];
		root = new int[V+1];
		visited = new boolean[V+1];
        	//루트 노드 초기화
		for(int i=0;i<=V;i++) 
			root[i] = i;
			//그래프의 값 저장	
		for(int i=0;i<E;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int A = Integer.parseInt(st.nextToken());
			int B = Integer.parseInt(st.nextToken());
			long C = Long.parseLong(st.nextToken());
			graph[i] = new node(A,B,C);
		}
        	//선분 가중치 기준 오름차순 정렬
		Arrays.sort(graph, new Comparator<node>() {
			@Override
			public int compare(node o1, node o2) {
				return (int)(o1.value - o2.value);
			}
		});
        	//선분들 탐색
		for(int i=0;i<E;i++) {
        		//루트 노드 같은지 확인
			if(!union(graph[i].point1, graph[i].point2)) {
				result += graph[i].value;	//같으면 가중치 더하기
			}
		}
		bw.write(result + "\n");	//최소 신장 트리의 가중치 BufferedWriter 저장
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//루트 노드 구하는 함수
	static int find(int n) {
		if(root[n] == n)
			return n;
		return root[n] = find(root[n]);
	}
    	//루트 노드 같은지 확인 및 변경하는 함수
	static boolean union(int a, int b) {
		int x = find(a);
		int y = find(b);
		if(x != y) {
			if(x<y)
				root[y] = x;
			else
				root[x] = y;
			return false;		//루트 노드가 다르다. 
		}
		return true;		//루트 노드가 같다.
	}
}
