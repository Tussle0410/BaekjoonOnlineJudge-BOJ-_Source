import java.io.*;
import java.util.*;

public class Main{
		//지도 구역 관련 생성자
	static class position{
		int x,y;
		public position(int x, int y) {
			super();
			this.x = x;
			this.y = y;
		}
		
	}
    	//다리 관련 생성자
	static class line{
		int p1, p2, width;
		public line(int p1, int p2, int width) {
			super();
			this.p1 = p1;
			this.p2 = p2;
			this.width = width;
		}	
	}
	static int N,M;
	static int[][] map,location, width;		//지도, 구역, 다리 길이 저장 배열
	static int[] root;		//루트 노드 저장 배열
	static int[] dx = {0, 0, -1, 1};	//상, 하, 좌, 우 x값 변경값
	static int[] dy = {-1, 1, 0, 0};	//상, 하, 좌, 우 y값 변경값
	static ArrayList<line> bridge = new ArrayList<>();	//다리 관련 리스트
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		location = new int[N][M];
        	//지도 관련 정보 저장
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j=0;j<M;j++) 
				map[i][j] = Integer.parseInt(st.nextToken());
		}
		int locationIdx = 1;	
        	//지도에 표시된 구역 나누기
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				if(location[i][j]!=0 || map[i][j]==0)
					continue;
				bfs(j,i, locationIdx++);	//구역 나누는 BFS 함수 실행
			}
		}
		width = new int[locationIdx][locationIdx];
		root = new int[locationIdx];
        	//다리 길이 관련 배열 초기화
		for(int i=0;i<width.length;i++)
			Arrays.fill(width[i], 101);
            	//루트 노드 관련 배열 초기화
		for(int i=0;i<root.length;i++) 
			root[i] = i;
            	//중복을 제외한 모든 다리 구하기
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				if(map[i][j]==0)
					continue;
				if(j<M-1 && map[i][j+1]==0)	//가로형 다리
					horizontality(j+1,i);
				if(i<N-1 && map[i+1][j] == 0)	//세로형 다리
					vertical(j,i+1);
			}
		}
		if(bridge.isEmpty()) {		//다리가 존재하지 않을 때
			bw.write("-1\n");
		}else {
        		//Union-Find를 위한 다리 길이 기준 오름차순 정렬
			Collections.sort(bridge, new Comparator<line>() {
				@Override
				public int compare(line o1, line o2) {
					return o1.width - o2.width;
				}
			});
				//최소 신장 트리의 가중치 합 구하기
			int result = 0;
			for(int i=0;i<bridge.size();i++) {
				if(!union(bridge.get(i).p1,bridge.get(i).p2))
					result += bridge.get(i).width;
			}
            		//모든 섬이 연결되었는지 확인하기
			boolean check = false;
			for(int i=1;i<root.length;i++) {
				if(find(i) != 1) {
					check = true;
					break;
				}
			}
			if(check)		//모든 섬이 연결되지 않았을 때
				bw.write("-1\n");
			else		//모든 섬이 연결되었을 때
				bw.write(result + "\n");
		}
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//가로형 다리 구하는 함수
	static void horizontality(int x, int y) {
		int count = 0;
		int curX = x;
		int curY = y;
		boolean check = false;
		while(curX<M) {
			if(map[curY][curX] == 1) {
				check = true;
				break;
			}
			count++;
			curX++;
		}
		x-=1;
        	//중복되는 다리 제외하기 위해서 Width[]을 이용
		if(count>=2 && check) {
			if(width[location[y][x]][location[curY][curX]]>count) {
				width[location[curY][curX]][location[y][x]] = count;
				width[location[y][x]][location[curY][curX]] = count;
				bridge.add(new line(location[y][x],location[curY][curX],count));
			}
		}
	}
    	//세로형 다리 구하는 함수
	static void vertical(int x, int y) {
		int count=0;
		int curX = x;
		int curY = y;
		boolean check = false;
		while(curY<N) {
			if(map[curY][curX] == 1) {
				check = true;
				break;
			}
			count++;
			curY++;
		}
		y-=1;
        	//중복되는 다리 제거하기 위해 Width[] 이용
		if(count>=2 && check) {
			if(width[location[y][x]][location[curY][curX]]>count) {
				width[location[curY][curX]][location[y][x]] = count;
				width[location[y][x]][location[curY][curX]] = count;
				bridge.add(new line(location[y][x],location[curY][curX],count));
			}
		}
	}
    	//루트 노드 같은지 확인 및 변경하는 함수
	static boolean union(int a, int b) {
		int x = find(a);
		int y = find(b);
		if(x!=y) {
			if(x<y)
				root[y] = x;
			else
				root[x] = y;
			return false;
		}
		return true;
	}
    	//루트 노드 찾는 함수
	static int find(int n) {
		if(n == root[n])
			 return n;
		return root[n] = find(root[n]);
	}
    	//BFS탐색으로 지도에 있는 섬에 대하여 구역을 나누는 함수
	static void bfs(int x, int y, int idx) {
		Queue<position> queue = new LinkedList<>();
		queue.add(new position(x, y));
		location[y][x] = idx;
		while(!queue.isEmpty()) {
			position cur = queue.poll();
			for(int i=0;i<4;i++) {
				int tempX = cur.x + dx[i];
				int tempY = cur.y + dy[i];
				if(tempX>=0 && tempX<M && tempY>=0 && tempY<N) {
					if(location[tempY][tempX]==0 && map[tempY][tempX]==1) {
						location[tempY][tempX] = idx;
						queue.add(new position(tempX, tempY));
					}
				}
			}
		}
	}
}
