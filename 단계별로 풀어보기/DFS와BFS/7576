import java.io.*;
import java.util.*;
public class Main{
	//-------좌표 생성자---------
	public static class coordinate{
		int x,y;
		public coordinate(int x, int y) {
			this.x = x;
			this.y = y;
		}
		public int getX() {
			return x;
		}
		public int getY() {
			return y;
		}
	}
	public static int N,M;
	public static int[][] box;	//창고 값 저장 배열
	public static boolean[][] check;	//창고 지점 탐색 확인 배열
	public static int[] dx = {-1, 1, 0, 0};		//상,하,좌,우 X 변경값
	public static int[] dy = {0, 0, -1, 1};		//상,하,좌,우 Y 변경값
   	 //BFS에 사용될 큐
	public static Queue<coordinate> queue = new LinkedList<coordinate>();
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //--------입력값 저장 및 배열 초기화----------
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	N = Integer.parseInt(st.nextToken());
    	M = Integer.parseInt(st.nextToken());
    	box = new int[M][N];
    	check = new boolean[M][N];
    	for(int i=0;i<M;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		for(int j=0;j<N;j++) {
    			int num = Integer.parseInt(st.nextToken());
    			if(num == 1)
    				queue.add(new coordinate(i, j));
    			else if(num == -1) {
			/*
                    	입력값이 -1일 때 탐색하지 못하는 지점으로
                    	check를 true로 변경해주었으며
                    	마지막에 창고에 모든 토마토가 익었는지 확인하기 때문에
                   	값을 1로 저장하도록 하였습니다.
                    	*/
    				num=1;
    				check[i][j] = true;
    			}
    			box[i][j] = num;
    		}
    	}
    	int result = bfs();		//BFS 함수 실행
    	if(isFull()) {		//모든 토마토가 익었을 때
    		bw.write(result + "\n");	//최소 기간 BufferedWriter 저장
    	}else		//익지않은 토마토가 존재할 때
    		bw.write("-1");		//-1을 BufferedWriter 저장
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();

    }
    //--------BFS를 통한 창고 탐색함수-------
    public static int bfs() {
    	int count = -1;
        /*
        count를 -1로 초기화한 이유는
        창고의 처음 토마토는 하루가 지나서 익은 것이 아닌
        처음부터 익어져 있기 때문에
        첫 날의 탐색은 넘어가고 다음부터 +1을 하였습니다.
        */
    	while(!queue.isEmpty()) {		//BFS 탐색
    		int size = queue.size();
    		for(int i=0;i<size;i++) {
        		coordinate temp = queue.poll();
        		int x = temp.getX();
        		int y = temp.getY();
        		check[x][y] = true;
        		for(int j=0;j<4;j++) {
        			int tempX = x + dx[j];		//상,하,좌,우 X값 변경
        			int tempY = y + dy[j];		//상,하,좌,우 Y값 변경
        			if(tempX>=0 && tempX<M && tempY>=0 && tempY<N) {
        				if(!check[tempX][tempY] && box[tempX][tempY]==0) {
                        			//익지않은 인접한 토마토 찾을 경우
        					queue.add(new coordinate(tempX, tempY));
        					box[tempX][tempY] = 1;
        				}
        			}
        		}
    		}
    		count++;
    	}
    	return count;
    }
    //-------창고에 토마토가 다 익었는지 확인하는 함수------
    public static boolean isFull() {
    	for(int i=0;i<M;i++) {
    		for(int j=0;j<N;j++) {
        		if(box[i][j]!=1)
        			return false;
    		}
    	}
    	return true;
    }
}
