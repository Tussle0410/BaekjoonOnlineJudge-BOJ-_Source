import java.io.*;
import java.util.*;
public class Main{
	public static int N,K;
	public static int[] day = new int[100001];	//지점별 걸리는 최소 초 저장
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //-------입력값 저장 및 배열 초기화--------
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	N = Integer.parseInt(st.nextToken());
    	K = Integer.parseInt(st.nextToken());
    	if(N==K)	//시작 지점과 도착 지점이 같을 경우
    		bw.write("0");
    	else {
        	bfs();		//함수 실행
        	bw.write(day[K] + "\n");	//도착 지점 최소 걸리는 초 BufferedWriter 저장
    	}
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    	
    }
    //--------BFS으로 최소 걸리는 초를 구하는 함수---------
    public static void bfs() {
    	Queue<Integer> queue = new LinkedList<Integer>();
    	queue.add(N);
    	int count=1;
    	while(!queue.isEmpty()) {
    		int size = queue.size();
    		for(int i=0;i<size;i++) {
        		int start = queue.poll();
        		int tempPlus = start + 1;		// +1일 때
        		int tempMinus = start - 1;		// -1일 때
        		int tempMul = start * 2;		//*2일 때
        		if(tempMinus==K || tempMul==K||tempPlus==K) {	//목적 지점 도착시
        			day[K] = count;
        			return;
        		}
        		if(tempPlus<=100000 && day[tempPlus]==0) {
        			day[tempPlus] = count;
        			queue.add(tempPlus);
        		}
        		if(tempMinus>=0 && day[tempMinus]==0) {
        			day[tempMinus] = count;
        			queue.add(tempMinus);
        		}
        		if(tempMul<=100000 && day[tempMul]==0) {
        			day[tempMul] = count;
        			queue.add(tempMul);
        		}
    		}
    		count++;
    	}
    }
}
