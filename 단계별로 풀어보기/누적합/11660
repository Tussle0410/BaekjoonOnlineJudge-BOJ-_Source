import java.io.*;
import java.util.*;
public class Main{
	static int N,M;
	static int[][] num,DP;	//N×N수 저장 배열, 누적합 저장 배열
	public static void main(String[] arg) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
        	//------입력값 저장 및 배열 초기화------
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		num = new int[N+1][N+1];
		DP = new int[N+1][N+1];
		for(int i=1;i<=N;i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j=1;j<=N;j++) {
				num[i][j] = Integer.parseInt(st.nextToken());
				DP[i][j] = DP[i][j-1] + num[i][j];	//누적합 저장
			}
		}
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int x1 = Integer.parseInt(st.nextToken());
			int y1 = Integer.parseInt(st.nextToken());
			int x2 = Integer.parseInt(st.nextToken());
			int y2 = Integer.parseInt(st.nextToken());
			int result = cal(x1,y1,x2,y2);	//구간 범위 구하는 함수 실행
			bw.write(result + "\n");		//구간 합 BufferedWriter 저장
		}
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//행의 누적합을 이용하여 구간의 합을 구하는 함수
	static int cal(int x1, int y1, int x2, int y2) {
		int sum = 0;
		if(x1 == x2)		//x1==x2일 때에는 행이 동일하기 때문
			sum = DP[x2][y2] - DP[x1][y1-1];
		else {
        		//행마다 누적합 더하는 연산
			for(int i=x1;i<=x2;i++)
				sum += DP[i][y2] - DP[i][y1-1];
		}
		return sum;		//구간의 합 반환
	}
}
