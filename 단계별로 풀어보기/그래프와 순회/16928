import java.io.*;
import java.util.*;

public class Main {
	//보드에 대한 정보
	static class boardPoint{
		int cur, count;
		public int getCur() {
			return cur;
		}

		public int getCount() {
			return count;
		}

		public boardPoint(int cur, int count) {
			this.cur = cur;
			this.count = count;
		}

	}
	static int N,M;
	static int[] ladder = new int[101];	//사다리 정보
	static int[] snake = new int[101];	//뱀 정보
	static boolean[] visited = new boolean[101];	//보드 칸 저장 정보
    public static void main(String[] args) throws IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	N = Integer.parseInt(st.nextToken());
    	M = Integer.parseInt(st.nextToken());
        //사다리 정보 저장
    	for(int i=0;i<N;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		int x = Integer.parseInt(st.nextToken());
    		int y = Integer.parseInt(st.nextToken());
    		ladder[x] = y;
    	}
        //뱀 정보 저장
    	for(int i=0;i<M;i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		int u = Integer.parseInt(st.nextToken());
    		int v = Integer.parseInt(st.nextToken());
    		snake[u] = v;
    	}
    	int result = game();	//BFS를 통한 게임 진행 및 최소 주사위 던진 횟수 저장
    	bw.write(result + "\n");	//최소 주사위 던진 횟수 BufferedWriter 저장
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    }
    //BFS을 탐색을 통한 게임을 진행하여 가장 먼저 100칸에 도착하는 주사위 횟수를 구하는 함수
    static int game() {
    	Queue<boardPoint> queue = new LinkedList<boardPoint>();
    	queue.add(new boardPoint(1, 0));
    	visited[1] = true;	//시작칸 방문 확인
    	while(!queue.isEmpty()) {
    		boardPoint temp = queue.poll();
    		int cur = temp.getCur();
    		int count = temp.getCount();
    		if(cur==100)		//100칸 도착했을 때
    			return count;		//주사위 던진 횟수 반환
    		for(int i=1;i<=6;i++) {		//주사위 1~6번일 때
    			int next = cur + i;
    			if(next<=100 && !visited[next]) {	//이동할 때 방문하지 않았을 경우
    				visited[next] = true;
    				if(ladder[next]!=0) {		//이동한 칸이 사다리인 경우
    					visited[ladder[next]] = true;
    					queue.add(new boardPoint(ladder[next], count+1));
    				}else if(snake[next]!=0) {	//이동한 칸이 뱀인 경우
    					visited[snake[next]] = true;
    					queue.add(new boardPoint(snake[next], count+1));
    				}else {		//이동한 칸이 일반적인 칸인 경우
    					queue.add(new boardPoint(next, count+1));
    				}
    			}
    		}
    	}
    	return 0;
    }
}
