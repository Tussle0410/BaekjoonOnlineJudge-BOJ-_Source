import java.io.*;
import java.util.*;
public class Main {
	static int N,M,R,count=1;
	static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();	//그래프 값 저장 리스트
	static int[] result;		//순번 저장 배열
	static boolean[] visited;	//정점 방문 배열
	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	//입력값 처리하는 BufferedReader
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        	//결과값 출력하는 BufferedWriter
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
        	//입력값 저장, 배열 및 리스트 초기화
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		R = Integer.parseInt(st.nextToken());
		result = new int[N+1];
		visited = new boolean[N+1];
		for(int i=0;i<=N;i++) 
			graph.add(new ArrayList<>());
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine()," ");
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			graph.get(u).add(v);
			graph.get(v).add(u);
		}
		bfs(R);		//너비 우선 탐색 실행
		for(int i=1;i<=N;i++) 		//각 순번 BufferedWriter 저장
			bw.write(result[i] + "\n");
		bw.flush();		//결과 출력
		bw.close();
		br.close();
	}
    	//너비 우선 탐색을 수행하는 함수
	static void bfs(int start) {
		Queue<Integer> queue = new LinkedList<Integer>();	//사용할 큐
		queue.add(start);	//시작 정점 큐에 저장
		visited[start] = true;		//시작 정점 방문 확인
		result[start] = count++;	//시작 순번 저장
		while(!queue.isEmpty()) {
			int cur = queue.poll();
			Collections.sort(graph.get(cur));	//오름차순 정렬
            		//인접한 정점 탐색
			for(int next : graph.get(cur)) {
				if(!visited[next]) {	//방문하지 않았던 정점시
					visited[next] = true;
					result[next] = count++;
					queue.add(next);
				}

			}
		}
		return;
	}
}
