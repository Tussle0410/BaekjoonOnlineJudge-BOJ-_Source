import java.io.*;
import java.util.*;
public class Main{
	static int[] tree;	//나무 높이 저장 배열
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //------입력값 저장 및 배열 초기화-------
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        tree = new int[N];
        st = new StringTokenizer(br.readLine()," ");
        int max = Integer.MIN_VALUE;		//최대값
        for(int i=0;i<N;i++) {
        	tree[i] = Integer.parseInt(st.nextToken());
        	max = Math.max(max, tree[i]);
        }
        //-------함수 실행 및 결과 출력-------
        bw.write(treeHeight(max, N, M) + "\n");        
        bw.flush();
        bw.close();
        br.close();
    }
    //-----자를 수 있는 최대값 구하는 함수--------
    //UpperBound 이용
    public static long treeHeight(int max, int N, int M) {
    	long start = 0;
    	long end = max;
    	while(start<end) {
    		long median = (start + end) / 2;
    		long sum = heightCheck(median, N);
    		if(sum<M)
    			end = median;
    		else
    			start = median + 1;
    	}
    	return start-1;		//UpperBound 형태로 -1을 취해줌
    }
    //-------잘랐을 때 나오는 길이 구하는 함수--------
    public static long heightCheck(long height, int N) {
    	long result = 0;
    	for(int i=0;i<N;i++) {
    		long temp = tree[i] - height;
    		result += temp<0?0:temp;	//자르는 값이 해당 나무보다 높으면 0을 저장
    	}
    	return result;
    }

}
