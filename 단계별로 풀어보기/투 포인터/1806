import java.io.*;
import java.util.*;
public class Main{
	static int[] num;	//수열 값 저장 배열
    public static void main(String[] args) throws IOException{
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //입력값 처리하는 BufferedReader
    	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        //결과값 출력하는 BufferedWriter
        //--------입력값 저장 및 배열 초기화--------
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	int N = Integer.parseInt(st.nextToken());
    	int S = Integer.parseInt(st.nextToken());
    	num = new int[N];
    	st = new StringTokenizer(br.readLine()," ");
    	for(int i=0;i<N;i++) 
    		num[i] = Integer.parseInt(st.nextToken());
    	int result = cal(N,S);		//함수 실행
    	if(result == Integer.MAX_VALUE)	//조건 만족하는 범위 없을 때
    		bw.write("0\n");
    	else
    		bw.write(result + "\n");	//최단 길이 BufferedWriter 저장
    	bw.flush();		//결과 출력
    	bw.close();
    	br.close();
    }
    //투 포인터를 이용한 S 이상 범위합의 최단 길이 구하는 함수
    static int cal(int N, int S) {
    	int start = 0;		//Start 포인터
    	int end = 0;		//End 포인터
    	int length = Integer.MAX_VALUE;
    	int temp = num[start];
    	while(true) {
    		if(temp<S) {	//조건 1.
    			end++;
    			if(end==N)
    				break;
    			temp += num[end];	//End값 증가시 현재 범위 값에 num[end+1]값 증가
    		}else {		조건 2.
    			length = Math.min(length, end - start + 1);
    			temp -= num[start];	//Start값 증가시 현재 범위 값에 num[start]값 감소
    			start++;
    		}
    	}
    	return length;		//결과 반환
    }
}
